"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7607],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=u(n),m=a,p=g["".concat(l,".").concat(m)]||g[m]||d[m]||o;return n?r.createElement(p,s(s({ref:t},c),{},{components:n})):r.createElement(p,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:13},s="Testing with gtest",i={unversionedId:"developing-contracts/testing-gtest",id:"developing-contracts/testing-gtest",title:"Testing with gtest",description:"gtest simulates a real network by providing mockups of the user, program, balances, mailbox, etc. Since it does not include parts of the actual blockchain, it is fast and lightweight. But being a model of the blockchain network, gtest cannot be a complete reflection of the latter.",source:"@site/docs/developing-contracts/testing-gtest.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/testing-gtest",permalink:"/zh-cn/docs/developing-contracts/testing-gtest",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/testing-gtest.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"System Signals",permalink:"/zh-cn/docs/developing-contracts/system-signals"},next:{title:"Testing with gclient",permalink:"/zh-cn/docs/developing-contracts/testing-gclient"}},l={},u=[{value:"Import <code>gtest</code> lib",id:"import-gtest-lib",level:2},{value:"<code>gtest</code> capabilities",id:"gtest-capabilities",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-with-gtest"},"Testing with ",(0,a.kt)("inlineCode",{parentName:"h1"},"gtest")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"gtest")," simulates a real network by providing mockups of the user, program, balances, mailbox, etc. Since it does not include parts of the actual blockchain, it is fast and lightweight. But being a model of the blockchain network, ",(0,a.kt)("inlineCode",{parentName:"p"},"gtest")," cannot be a complete reflection of the latter."),(0,a.kt)("p",null,"As we said earlier, ",(0,a.kt)("inlineCode",{parentName:"p"},"gtest")," is excellent for unit and integration testing. It is also helpful for debugging Gear program logic. Nothing other than the Rust compiler is required for running tests based on ",(0,a.kt)("inlineCode",{parentName:"p"},"gtest"),". It is predictable and robust when used in continuous integration."),(0,a.kt)("h2",{id:"import-gtest-lib"},"Import ",(0,a.kt)("inlineCode",{parentName:"h2"},"gtest")," lib"),(0,a.kt)("p",null,"To use the ",(0,a.kt)("inlineCode",{parentName:"p"},"gtest")," library, you must import it into your ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"[dev-dependencies]")," block to fetch and compile it for tests only:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "first-gear-app"\nversion = "0.1.0"\nauthors = ["Your Name"]\nedition = "2021"\n\n[dependencies]\ngstd = { git = "https://github.com/gear-tech/gear.git", branch = "stable" }\n\n[build-dependencies]\ngear-wasm-builder = { git = "https://github.com/gear-tech/gear.git", branch = "stable" }\n\n[dev-dependencies]\ngtest = { git = "https://github.com/gear-tech/gear.git", branch = "stable" }\n')),(0,a.kt)("h2",{id:"gtest-capabilities"},(0,a.kt)("inlineCode",{parentName:"h2"},"gtest")," capabilities"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Initialization of the common environment for running smart contracts:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    // This emulates node's and chain's behavior.\n    //\n    // By default, sets:\n    // - current block equals 0\n    // - current timestamp equals UNIX timestamp of your system.\n    // - minimal message id equal 0x010000..\n    // - minimal program id equal 0x010000..\n    let sys = System::new();\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Program initialization:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    // Initialization of program structure from file.\n    //\n    // Takes as arguments reference to the related `System` and the path to wasm binary relatively\n    // the root of the crate where the test was written.\n    //\n    // Sets free program id from the related `System` to this program. For this case it equals 0x010000..\n    // Next program initialized without id specification will have id 0x020000.. and so on.\n    let _ = Program::from_file(\n        &sys,\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // Also, you may use the `Program::current()` function to load the current program.\n    let _ = Program::current(&sys);\n\n    // We can check the id of the program by calling `id()` function.\n    //\n    // It returns `ProgramId` type value.\n    let ping_pong_id = ping_pong.id();\n\n    // There is also a `from_file_with_id` constructor to manually specify the id of the program.\n    //\n    // Every place in this lib, where you need to specify some ids,\n    // it requires generic type \'ID`, which implements `Into<ProgramIdWrapper>`.\n    //\n    // `ProgramIdWrapper` may be built from:\n    // - u64;\n    // - [u8; 32];\n    // - String;\n    // - &str;\n    // - ProgramId (from `gear_core` one\'s, not from `gstd`).\n    //\n    // String implementation means the input as hex (with or without "0x")\n\n    // Numeric\n    let _ = Program::from_file_with_id(\n        &sys,\n        105,\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // Hex with "0x"\n    let _ = Program::from_file_with_id(\n        &sys,\n        "0xe659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e",\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // Hex without "0x"\n    let _ = Program::from_file_with_id(\n        &sys,\n        "e659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df5e",\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // Array [u8; 32] (e.g. filled with 5)\n    let _ = Program::from_file_with_id(\n        &sys,\n        [5; 32],\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // If you initialize program not in this scope, in cycle, in other conditions,\n    // where you didn\'t save the structure, you may get the object from the system by id.\n    let _ = sys.get_program(105);\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Getting the program from the system:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    // If you initialize program not in this scope, in cycle, in other conditions,\n    // where you didn't save the structure, you may get the object from the system by id.\n    let _ = sys.get_program(105);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Initialization of styled ",(0,a.kt)("inlineCode",{parentName:"li"},"env_logger"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    // Initialization of styled `env_logger` to print logs (only from `gwasm` by default) into stdout.\n    //\n    // To specify printed logs, set the env variable `RUST_LOG`:\n    // `RUST_LOG="target_1=logging_level,target_2=logging_level" cargo test`\n    //\n    // Gear smart contracts use `gwasm` target with `debug` logging level\n    sys.init_logger();\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sending messages:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    To send message to the program need to call one of two program\'s functions:\n    // `send()` or `send_bytes()` (or `send_with_value` and `send_bytes_with_value` if you need to send a message with attached funds).\n    //\n    // Both of the methods require sender id as the first argument and the payload as second.\n    //\n    // The difference between them is pretty simple and similar to `gstd` functions\n    // `msg::send()` and `msg::send_bytes()`.\n    //\n    // The first one requires payload to be CODEC Encodable, while the second requires payload\n    // implement `AsRef<[u8]>`, that means to be able to represent as bytes.\n    //\n    // `send()` uses `send_bytes()` under the hood with bytes from payload.encode().\n    //\n    // First message to the initialized program structure is always the init message.\n    let res = program.send_bytes(100001, "INIT MESSAGE");\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Processing the result of the program execution:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    // Any sending functions in the lib returns `RunResult` structure.\n    //\n    // It contains the final result of the processing message and others,\n    // which were created during the execution.\n    //\n    // It has 4 main functions.\n\n    // Returns the reference to the Vec produced to users messages.\n    // You may assert them as you wish, iterating through them.\n    assert!(res.log().is_empty());\n\n    // Returns bool which shows that there was panic during the execution\n    // of the main message.\n    assert!(!res.main_failed());\n\n    // Returns bool which shows that there was panic during the execution\n    // of the created messages during the main execution.\n    //\n    // Equals false if no others were called.\n    assert!(!res.others_failed());\n\n    // Returns bool which shows that logs contain a given log.\n    //\n    // Syntax sugar around `res.log().iter().any(|v| v == arg)`.\n    assert!(!res.contains(&Log::builder()));\n\n    // To build a log for assertion you need to use `Log` structure with its builders.\n    // All fields here are optional.\n    // Assertion with Logs from core are made on the Some(..) fields\n    // You will run into panic if you try to set the already specified field.\n    //\n    // Constructor for success log.\n    let _ = Log::builder();\n\n    // Constructor for error reply log.\n    //\n    // Note that error reply never contains payload.\n    // And its exit code equals 1, instead of 0 for success replies.\n    let _ = Log::error_builder();\n\n    // Let\u2019s send a new message after the program has been initialized.\n    // The initialized program expects to receive a byte string "PING" and replies with a byte string "PONG".\n    let res = ping_pong.send_bytes(100001, "PING");\n\n    // Other fields are set optionally by `dest()`, `source()`, `payload()`, `payload_bytes()`.\n    //\n    // The logic for `payload()` and `payload_bytes()` is the same as for `send()` and `send_bytes()`.\n    // First requires an encodable struct. The second requires bytes.\n    let log = Log::builder()\n        .source(ping_pong_id)\n        .dest(100001)\n        .payload_bytes("PONG");\n\n    assert!(res.contains(&log));\n\n    let wrong_log = Log::builder().source(100001);\n\n    assert!(!res.contains(&wrong_log));\n\n    // Log also has `From` implementations from (ID, T) and from (ID, ID, T),\n    // where ID: Into<ProgramIdWrapper>, T: AsRef<[u8]>\n    let x = Log::builder().dest(5).payload_bytes("A");\n    let x_from: Log = (5, "A").into();\n\n    assert_eq!(x, x_from);\n\n    let y = Log::builder().dest(5).source(15).payload_bytes("A");\n    let y_from: Log = (15, 5, "A").into();\n\n    assert_eq!(y, y_from);\n\n    assert!(!res.contains(&(ping_pong_id, ping_pong_id, "PONG")));\n    assert!(res.contains(&(1, 100001, "PONG")));\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Spending blocks:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    // You may control time in the system by spending blocks.\n    //\n    // It adds the amount of blocks passed as arguments to the current block of the system.\n    // Same for the timestamp. Note, that for now 1 block in Gear network is 1 sec duration.\n    sys.spend_blocks(150);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Reading the program state:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    // To read the program state you need to call one of two program\'s functions:\n    // `meta_state()` or `meta_state_with_bytes()`.\n    //\n    // The methods require the payload as the input argument.\n    //\n    // The first one requires payload to be CODEC Encodable, while the second requires payload\n    // implement `AsRef<[u8]>`, that means to be able to represent as bytes.\n    //\n    // Let we have the following contract state and `meta_state` function:\n    #[derive(Encode, Decode, TypeInfo)]\n    pub struct ContractState {\n        a: u128,\n        b: u128,\n    }\n\n    pub enum State {\n        A,\n        B,\n    }\n\n    pub enum StateReply {\n        A(u128),\n        B(u128),\n    }\n\n    #[no_mangle]\n    unsafe extern "C" fn meta_state() -> *mut [i32; 2] {\n        let query: State = msg::load().expect("Unable to decode `State`");\n        let encoded = match query {\n            State::A => StateReply::A(STATE.a),\n            State::B => StateReply::B(STATE.b),\n        }.encode();\n        gstd::util::to_leak_ptr(encoded)\n    }\n\n    // Let\'s send a query from gtest:\n    let reply: StateReply = self\n            .meta_state(&State::A)\n            .expect("Meta_state failed");\n    let expected_reply = StateReply::A(10);\n    assert_eq!(reply,expected_reply);\n\n    // If your `meta_state` function doesn\'t require input payloads,\n    // you can use `meta_state_empty` or `meta_state_empty_with_bytes` functions\n    // without any arguments.\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Balance:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    // If you need to send a message with value you have to mint balance for the message sender:\n    let user_id = 42;\n    sys.mint_to(user_id, 5000);\n    assert_eq!(sys.balance_of(user_id), 5000);\n\n    // To give the balance to the program you should use `mint` method:\n    let prog = Program::current(&sys);\n    prog.mint(1000);\n    assert_eq!(prog.balance(), 1000);\n")))}d.isMDXComponent=!0}}]);