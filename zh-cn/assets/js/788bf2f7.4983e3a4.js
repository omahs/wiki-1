"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4447],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(b,r(r({ref:n},p),{},{components:t})):a.createElement(b,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const i={sidebar_position:20},r="NFT \u50cf\u7d20\u753b\u5e03",l={unversionedId:"examples/nft-pixelboard",id:"examples/nft-pixelboard",title:"NFT \u50cf\u7d20\u753b\u5e03",description:"\u4ecb\u7ecd",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/examples/nft-pixelboard.md",sourceDirName:"examples",slug:"/examples/nft-pixelboard",permalink:"/zh-cn/docs/examples/nft-pixelboard",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/nft-pixelboard.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"\u731c\u62f3\u6e38\u620f",permalink:"/zh-cn/docs/examples/rock-paper-scissors"},next:{title:"DEX",permalink:"/zh-cn/docs/examples/dex"}},s={},c=[{value:"\u4ecb\u7ecd",id:"\u4ecb\u7ecd",level:2},{value:"\u4e1a\u52a1\u903b\u8f91",id:"\u4e1a\u52a1\u903b\u8f91",level:2},{value:"\u63a5\u53e3",id:"\u63a5\u53e3",level:2},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316",level:3},{value:"Actions",id:"actions",level:3},{value:"Meta state \u67e5\u8be2",id:"meta-state-\u67e5\u8be2",level:3},{value:"\u6e90\u7801",id:"\u6e90\u7801",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nft-\u50cf\u7d20\u753b\u5e03"},"NFT \u50cf\u7d20\u753b\u5e03"),(0,o.kt)("h2",{id:"\u4ecb\u7ecd"},"\u4ecb\u7ecd"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"\u8fd9\u7bc7\u6587\u7ae0\u76f4\u89c2\u4ecb\u7ecd\u4e86\u667a\u80fd\u5408\u7ea6\u7684\u76ee\u7684\u548c\u903b\u8f91\u3002\u5173\u4e8e\u66f4\u8be6\u7ec6\u7684\u6280\u672f\u63cf\u8ff0\uff0c\u8bf7\u770b",(0,o.kt)("a",{parentName:"p",href:"https://dapps.gear.rs/nft_pixelboard_io"},"\u6587\u6863")," \u548c ",(0,o.kt)("a",{parentName:"p",href:"#%E6%BA%90%E7%A0%81"},"\u6e90\u7801"),"\u3002")),(0,o.kt)("p",null,"\u8fd9\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u60f3\u6cd5\u6765\u81ea ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/The_Million_Dollar_Homepage"},(0,o.kt)("strong",{parentName:"a"},"\u767e\u4e07\u7f8e\u5143\u4e3b\u9875")),"\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709 1000 x 1000 \u50cf\u7d20\u753b\u5e03\u7684\u7f51\u7ad9\uff0c\u4e0a\u9762\u7684 1 \u4e2a\u50cf\u7d20\u552e\u4ef7\u662f 1 \u7f8e\u5143\u3002\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u5728\u90a3\u91cc\u4e70\u4e00\u4e2a 10 x 10 \u7684\u50cf\u7d20\u5757\u6216\u51e0\u4e2a\u8fd9\u6837\u7684\u5757\uff0c\u7ed8\u5236\u8d2d\u4e70\u7684\u50cf\u7d20\u5757\uff0c\u5e76\u5728\u4e0a\u9762\u9644\u4e0a\u4e00\u4e9b\u7f51\u7edc\u94fe\u63a5\u3002NFT \u50cf\u7d20\u753b\u5e03\u4f7f\u7528\u540c\u6837\u7684\u903b\u8f91\uff0c\u4f46\u6b64\u5916\uff0c\u8d2d\u4e70\u7684\u50cf\u7d20\u5757\u662f NFT\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u7740\u8272\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728\u8d2d\u4e70\u7684\u65f6\u5019\uff0c\u5e76\u4e14\u53ef\u4ee5\u8f6c\u552e\u3002"),(0,o.kt)("h2",{id:"\u4e1a\u52a1\u903b\u8f91"},"\u4e1a\u52a1\u903b\u8f91"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NFTPixelboardAction::Mint")," \u65b9\u6cd5\u7528\u6765 mint nft\u3002",(0,o.kt)("inlineCode",{parentName:"p"},"NFTPixelboardAction::ChangeSaleState")," \u65b9\u6cd5\u7528\u6765\u552e\u5356\u50cf\u7d20\u5757\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"NFTPixelboardAction::Paint")," \u65b9\u6cd5\u7528\u6765\u7ed8\u5236\u50cf\u7d20\u5757\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NFTPixelboardStateQuery::Painting")," \u7528\u4e8e\u83b7\u53d6\u50cf\u7d20\u677f\u7684\u6574\u4e2a\u7ed8\u753b\u3002\u7528\u6237\u901a\u8fc7 ",(0,o.kt)("inlineCode",{parentName:"p"},"NFTPixelboardStateQuery::TokenInfo")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"NFTPixelboardStateQuery::PixelInfo")," \u53ef\u4ee5\u83b7\u53d6 nft \u548c\u50cf\u7d20\u76f8\u5173\u7684\u4fe1\u606f\u3002"),(0,o.kt)("h2",{id:"\u63a5\u53e3"},"\u63a5\u53e3"),(0,o.kt)("h3",{id:"\u521d\u59cb\u5316"},"\u521d\u59cb\u5316"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Initializes the NFT pixelboard program.\n///\n/// # Requirements\n/// * `owner` address mustn't be [`ActorId::zero()`].\n/// * `block_side_length` must be more than 0.\n/// * `pixel_price` mustn't be more than [`MAX_PIXEL_PRICE`].\n/// * A [width](`Resolution#structfield.width`) &\n/// [height](`Resolution#structfield.height`) (`resolution`) of a canvas must be\n/// more than 0.\n/// * Each side of `resolution` must be a multiple of `block_side_length`.\n/// * `painting` length must equal a pixel count in a canvas (which can be\n/// calculated by multiplying a [width](`Resolution#structfield.width`) &\n/// [height](`Resolution#structfield.height`) from `resolution`).\n/// * `commission_percentage` mustn't be more than 100.\n/// * `ft_program` address mustn't be [`ActorId::zero()`].\n/// * `nft_program` address mustn't be [`ActorId::zero()`].\n#[derive(Decode, Encode, TypeInfo, Clone)]\npub struct InitNFTPixelboard {\n    /// An address of a pixelboard owner to which minting fees and commissions\n    /// on resales will be transferred.\n    pub owner: ActorId,\n    /// A block side length.\n    ///\n    /// To avoid a canvas clogging with one pixel NFTs, blocks are used instead\n    /// of pixels to set NFT [`Rectangle`]s. This parameter is used to set a\n    /// side length of these pixel blocks. If blocks aren't needed, then this\n    /// parameter can be set to 1, so the block side length will equal a pixel.\n    pub block_side_length: BlockSideLength,\n    /// The price of a free pixel. It'll be used to calculate a minting price.\n    pub pixel_price: u128,\n    /// A canvas (pixelboard) [width](`Resolution#structfield.width`) &\n    /// [height](`Resolution#structfield.height`).\n    pub resolution: Resolution,\n    /// A commission percentage that'll be included in each NFT resale.\n    pub commission_percentage: u8,\n    /// A painting that'll be displayed on the free territory of a pixelboard.\n    pub painting: Vec<Color>,\n\n    /// A FT program address.\n    pub ft_program: ActorId,\n    /// An NFT program address.\n    pub nft_program: ActorId,\n}\n")),(0,o.kt)("h3",{id:"actions"},"Actions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Sends a program info about what it should do.\n#[derive(Decode, Encode, TypeInfo, Clone)]\npub enum NFTPixelboardAction {\n    /// Mints one NFT on a pixelboard with given `token_metadata` & `painting`.\n    ///\n    /// Transfers a minted NFT to [`msg::source()`].\n    ///\n    /// # Requirements\n    /// * `rectangle` coordinates mustn't be out of a canvas.\n    /// * `rectangle` coordinates mustn't be mixed up or belong to wrong\n    /// corners.\n    /// * `rectangle` coordinates must observe a block layout. In other words,\n    /// each `rectangle` coordinate must be a multiple of a block side length in\n    /// the canvas. The block side length can be obtained by\n    /// [`NFTPixelboardStateQuery::BlockSideLength`].\n    /// * NFT `rectangle` mustn't collide with already minted one.\n    /// * `painting` length must equal a pixel count in an NFT\n    /// (which can be calculated by multiplying a [width](`Rectangle::width`) &\n    /// [height](`Rectangle::height`) from `rectangle`).\n    /// * [`msg::source()`] must have enough fungible tokens to buy all free\n    /// pixels that `rectangle` will occupy. An enough number of tokens can be\n    /// calculated by multiplying a `rectangle` area and the price of a free\n    /// pixel. The area can be calculated by multiplying a\n    /// [width](`Rectangle::width`) & [height](`Rectangle::height`) from\n    /// `rectangle`. The price of a free pixel can be obtained by\n    /// [`NFTPixelboardStateQuery::PixelPrice`].\n    ///\n    /// On success, returns [`NFTPixelboardEvent::Minted`].\n    ///\n    /// [`msg::source()`]: gstd::msg::source\n    Mint {\n        rectangle: Rectangle,\n        token_metadata: TokenMetadata,\n        /// A painting that'll be displayed in a place of an NFT on a pixelboard\n        /// after a successful minting.\n        painting: Vec<Color>,\n    },\n\n    /// Buys an NFT minted on a pixelboard.\n    ///\n    /// Transfers a purchased NFT from a pixelboard program to\n    /// [`msg::source()`].\n    ///\n    /// **Note:** If [`msg::source()`] has enough fungible tokens to pay a\n    /// resale commission but not the entire NFT, then the commission will still\n    /// be withdrawn from its account.\n    ///\n    /// # Requirements\n    /// * An NFT must be minted on a pixelboard.\n    /// * An NFT must be for sale. This can be found out by\n    /// [`NFTPixelboardStateQuery::TokenInfo`]. See also the documentation of\n    /// [`TokenInfo#structfield.pixel_price`].\n    /// * [`msg::source()`] must have enough fungible tokens to buy all pixels\n    /// that an NFT occupies. This can be found out by\n    /// [`NFTPixelboardStateQuery::TokenInfo`]. See also the documentation of\n    /// [`TokenInfo#structfield.pixel_price`].\n    ///\n    /// On success, returns [`NFTPixelboardEvent::Bought`].\n    ///\n    /// [`msg::source()`]: gstd::msg::source\n    Buy(TokenId),\n\n    /// Changes a sale state of an NFT minted on a pixelboard.\n    ///\n    /// There are 3 options of a sale state change:\n    /// * Putting up for sale\\\n    /// If an NFT is **not** for sale, then assigning `pixel_price` to [`Some`]\n    /// price will transfer it to a pixelboard program & put it up for sale.\n    /// * Updating a pixel price\\\n    /// If an NFT is for sale, then assigning `pixel_price` to [`Some`] price\n    /// will update its pixel price.\n    /// * Removing from sale\\\n    /// Assigning the `pixel_price` to [`None`] will transfer an NFT back to its\n    /// owner & remove an NFT from sale.\n    ///\n    /// **Note:** A commission is included in each NFT resale, so a seller\n    /// will receive not all fungible tokens but tokens with a commission\n    /// deduction. A commission percentage can be obtained by\n    /// [`NFTPixelboardStateQuery::CommissionPercentage`].\n    ///\n    /// # Requirements\n    /// * An NFT must be minted on a pixelboard.\n    /// * [`msg::source()`](gstd::msg::source) must be the owner of an NFT.\n    /// * `pixel_price` mustn't be more than [`MAX_PIXEL_PRICE`].\n    ///\n    /// On success, returns [`NFTPixelboardEvent::SaleStateChanged`].\n    ChangeSaleState {\n        token_id: TokenId,\n        /// A price of each pixel that an NFT occupies. To calculate a price of\n        /// the entire NFT, see the documentation of\n        /// [`TokenInfo#structfield.pixel_price`].\n        pixel_price: Option<u128>,\n    },\n\n    /// Paints with `painting` an NFT minted on a pixelboard.\n    ///\n    /// # Requirements\n    /// * An NFT must be minted on a pixelboard.\n    /// * [`msg::source()`](gstd::msg::source) must be the owner of an NFT.\n    /// * `painting` length must equal a pixel count in an NFT. The count can be\n    /// calculated by multiplying a [width](`Rectangle::width`) &\n    /// [height](`Rectangle::height`) from a rectangle of the NFT. The NFT\n    /// rectangle can be obtained by [`NFTPixelboardStateQuery::TokenInfo`].\n    ///\n    /// On success, returns [`NFTPixelboardEvent::Painted`].\n    Paint {\n        token_id: TokenId,\n        painting: Vec<Color>,\n    },\n}\n")),(0,o.kt)("h3",{id:"meta-state-\u67e5\u8be2"},"Meta state \u67e5\u8be2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Queries a program state.\n///\n/// On failure, returns a [`Default`] value.\n#[derive(Decode, Encode, TypeInfo)]\npub enum NFTPixelboardStateQuery {\n    /// Gets a painting from an entire canvas of a pixelboard.\n    ///\n    /// Returns [`NFTPixelboardStateReply::Painting`].\n    Painting,\n\n    /// Gets a pixelboard (canvas) resolution.\n    ///\n    /// Returns [`NFTPixelboardStateReply::Resolution`].\n    Resolution,\n\n    /// Gets the price of a free pixel.\n    ///\n    /// Returns [`NFTPixelboardStateReply::PixelPrice`].\n    PixelPrice,\n\n    /// Gets a block side length.\n    ///\n    /// For more info about this parameter, see\n    /// [`InitNFTPixelboard#structfield.block_side_length`] documentation.\n    ///\n    /// Returns [`NFTPixelboardStateReply::BlockSideLength`].\n    BlockSideLength,\n\n    /// Gets [`Token`] info by pixel coordinates.\n    ///\n    /// Useful, for example, for inspecting a pixelboard by clicking on\n    /// paintings.\n    ///\n    /// Returns [`NFTPixelboardStateReply::PixelInfo`].\n    PixelInfo(Coordinates),\n\n    /// Gets [`Token`] info by its ID.\n    ///\n    /// Returns [`NFTPixelboardStateReply::TokenInfo`].\n    TokenInfo(TokenId),\n\n    /// Gets a resale commission percentage.\n    ///\n    /// Returns [`NFTPixelboardStateReply::CommissionPercentage`].\n    CommissionPercentage,\n\n    /// Gets an FT program address used by a pixelboard.\n    ///\n    /// Returns [`NFTPixelboardStateReply::FTProgram`].\n    FTProgram,\n\n    /// Gets an NFT program address used by a pixelboard.\n    ///\n    /// Returns [`NFTPixelboardStateReply::NFTProgram`].\n    NFTProgram,\n}\n")),(0,o.kt)("h2",{id:"\u6e90\u7801"},"\u6e90\u7801"),(0,o.kt)("p",null,"\u672c\u5408\u7ea6\u4ee3\u7801\u5b9e\u73b0\u5df2\u5728 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/nft-pixelboard"},"GitHub"),"\u4e0a\u5f00\u6e90\u3002"),(0,o.kt)("p",null,"\u66f4\u591a\u5173\u4e8e\u5728 Gear \u4e0a\u6d4b\u8bd5\u667a\u80fd\u5408\u7ea6\u7684\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://wiki.gear-tech.io/zh-cn/developing-contracts/testing/"},"\u5e94\u7528\u6d4b\u8bd5"),"\u3002"))}d.isMDXComponent=!0}}]);