"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4570],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(t),h=o,k=p["".concat(d,".").concat(h)]||p[h]||u[h]||a;return t?r.createElement(k,i(i({ref:n},l),{},{components:t})):r.createElement(k,i({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_label:"RMRK NFT \u6807\u51c6",sidebar_position:15},i="RMRK NFT \u6807\u51c6",s={unversionedId:"examples/rmrk",id:"examples/rmrk",title:"RMRK NFT \u6807\u51c6",description:"\u4ecb\u7ecd",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/examples/rmrk.md",sourceDirName:"examples",slug:"/examples/rmrk",permalink:"/zh-cn/docs/examples/rmrk",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/rmrk.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_label:"RMRK NFT \u6807\u51c6",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Subsquid indexing",permalink:"/zh-cn/docs/examples/nft-marketplace/subsquid-marketplace"},next:{title:"\u94fe\u4e0a NFT",permalink:"/zh-cn/docs/examples/onchain-nft"}},d={},c=[{value:"\u4ecb\u7ecd",id:"\u4ecb\u7ecd",level:2},{value:"\u903b\u8f91",id:"\u903b\u8f91",level:2},{value:"\u5d4c\u5957\u903b\u8f91",id:"\u5d4c\u5957\u903b\u8f91",level:3},{value:"\u591a\u8d44\u6e90\u903b\u8f91",id:"\u591a\u8d44\u6e90\u903b\u8f91",level:3},{value:"<strong>\u8d44\u6e90\u5b58\u50a8\u5408\u7ea6</strong>",id:"\u8d44\u6e90\u5b58\u50a8\u5408\u7ea6",level:4},{value:"<strong>RMRK \u5408\u7ea6\u4e2d\u7684\u591a\u8d44\u6e90</strong>",id:"rmrk-\u5408\u7ea6\u4e2d\u7684\u591a\u8d44\u6e90",level:4},{value:"\u6e90\u7801",id:"\u6e90\u7801",level:2}],l={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rmrk-nft-\u6807\u51c6"},"RMRK NFT \u6807\u51c6"),(0,o.kt)("h2",{id:"\u4ecb\u7ecd"},"\u4ecb\u7ecd"),(0,o.kt)("p",null,"RMRK \u662f\u4e00\u4e2a NFT \u534f\u8bae\uff0c\u81f4\u529b\u4e8e\u5728 Kusama \u548c Polkadot \u751f\u6001\u7cfb\u7edf\u4e0a\u5efa\u7acb\u4e00\u4e2a\u6807\u51c6\u7684 NFT \u8de8\u94fe\u57fa\u7840\u8bbe\u65bd\u3002",(0,o.kt)("a",{parentName:"p",href:"https://docs.rmrk.app/concepts"},"RMRK NFT 2.0")," \u6982\u5ff5\u88ab\u5206\u4e3a RMRK Legos \u548c RMRK \u6982\u5ff5\u3002Legos \u662f\u6784\u6210\u590d\u6742\u7528\u4f8b\u548c\u542f\u7528\u67d0\u4e9b\u6982\u5ff5\u7684\u57fa\u7840\u3002"),(0,o.kt)("p",null,"RMRK legos \u5df2\u7ecf\u5728 Gear \u4e0a\u5b9e\u73b0\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5d4c\u5957\u7684 NFTs\uff1a\nNFT \u5305\u542b\u5176\u4ed6 RMRK NFT \u7684\u80fd\u529b\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u591a\u8d44\u6e90 NFT\uff1a\nNFT \u80fd\u591f\u6839\u636e\u5b83\u88ab\u52a0\u8f7d\u7684\u73af\u5883\u800c\u6539\u53d8\u5176\u8f93\u51fa\u3002")),(0,o.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u89e3\u91ca\u4e86\u63a5\u53e3\u3001\u6570\u636e\u7ed3\u6784\u3001\u57fa\u672c\u529f\u80fd\uff0c\u5e76\u89e3\u91ca\u4e86\u5b83\u4eec\u7684\u7528\u9014\u3002\u6e90\u4ee3\u7801\u53ef\u5728",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/RMRK"},"GitHub"),"\u4e0a\u627e\u5230\u3002"),(0,o.kt)("h2",{id:"\u903b\u8f91"},"\u903b\u8f91"),(0,o.kt)("h3",{id:"\u5d4c\u5957\u903b\u8f91"},"\u5d4c\u5957\u903b\u8f91"),(0,o.kt)("p",null,"\u5d4c\u5957 NFT \u7684\u6982\u5ff5\u662f\u6307 NFT \u80fd\u591f\u62e5\u6709\u5176\u4ed6 NFT\u3002\u56e0\u6b64\uff0cNFT \u7684\u6240\u6709\u8005\u4e0d\u4ec5\u53ef\u4ee5\u662f\u4e00\u4e2a\u8d26\u6237\u6216\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a NFT\u3002\n\u5728\u901a\u5e38\u7684 NFT \u6807\u51c6\u4e2d\uff0cNFT \u6240\u6709\u8005\u88ab\u5b58\u50a8\u4e3a\u4ece NFT id \u5230\u5730\u5740\u7684\u6620\u5c04\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"BTreeMap<TokenId, ActorId>\n")),(0,o.kt)("p",null,"\u5728 RMRK NFT \u6807\u51c6\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b58\u50a8\u4ee3\u5e01\u7684\u6240\u6709\u8005\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"BTreeMap<TokenId, RMRKOwner>\n\npub struct RMRKOwner {\n    pub token_id: Option<TokenId>,\n    pub owner_id: ActorId,\n}\n\n")),(0,o.kt)("p",null,"\u5982\u679c NFT \u7684\u6240\u6709\u8005\u662f\u53e6\u4e00\u4e2a NFT\uff0c\u90a3\u4e48\u5b57\u6bb5 ",(0,o.kt)("inlineCode",{parentName:"p"},"token_id")," \u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(parent_token_id)")," \u5e76\u4e14 ",(0,o.kt)("inlineCode",{parentName:"p"},"owner_id")," \u662f\u7236 RMRK \u5408\u7ea6\u7684\u5730\u5740\uff0c\u5426\u5219 ",(0,o.kt)("inlineCode",{parentName:"p"},"token_id")," \u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," \u5e76\u4e14 ",(0,o.kt)("inlineCode",{parentName:"p"},"owner_id")," \u662f\u5730\u5740\u4e00\u4e2a\u5e10\u6237\u6216\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u3002"),(0,o.kt)("p",null,"RMRK NFT \u4ee3\u5e01\u5177\u6709 ",(0,o.kt)("inlineCode",{parentName:"p"},"owner"),"\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"rootowner"),"\u7684\u6982\u5ff5\u3002 ",(0,o.kt)("inlineCode",{parentName:"p"},"Rootowner")," \u5c06\u59cb\u7ec8\u662f\u4e00\u4e2a\u5e10\u6237\u6216\u7a0b\u5e8f\uff0c\u5728 NFT \u62e5\u6709\u53e6\u4e00\u4e2a NFT \u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u8005\u4e5f\u53ef\u4ee5\u662f NFT ID\u3002\u4f8b\u5982\uff0c\u5982\u679c Alice \u62e5\u6709",(0,o.kt)("inlineCode",{parentName:"p"},"NFT A"),"\uff0c\u800c",(0,o.kt)("inlineCode",{parentName:"p"},"NFT A"),"\u53c8\u62e5\u6709",(0,o.kt)("inlineCode",{parentName:"p"},"NFT B"),"\uff0c\u90a3\u4e48",(0,o.kt)("inlineCode",{parentName:"p"},"NFT B"),"\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"owner"),"\u5c31\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"NFT A"),"\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"NFT B"),"\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"rootowner"),"\u5c31\u662f Alice\u3002"),(0,o.kt)("p",null,"RMRK \u6807\u51c6\u6709 2 \u79cd\u94f8\u9020\u4ee3\u5e01\u7684\u9009\u9879\u3002\u7b2c\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u901a\u5e38 NFT \u6807\u51c6\u4e2d\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"mint")," \u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Mints token to the user or program.\n///\n/// # Requirements:\n/// * The `token_id` must not exist.\n/// * The `to` address should be a non-zero address.\n///\n/// # Arguments:\n/// * `to`: is the address who will own the token.\n/// * `token_id`: is the tokenId of the new RMRK token.\n///\n/// On success reply [`RMRKEvent::MintToRootOwner`].\nMintToRootOwner {\n    to: ActorId,\n    token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u7b2c\u4e8c\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"mint"),"\u51fd\u6570\u5141\u8bb8\u4f60\u521b\u5efa\u4e00\u4e2a\u5c5e\u4e8e\u53e6\u4e00\u4e2a NFT\uff08\u6216\u6210\u4e3a\u53e6\u4e00\u4e2a NFT \u7684\u5b50\u4ee3\uff09\u7684 NFT\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Mints token that will belong to another token in another RMRK contract.\n///\n/// # Requirements:\n/// * The `parent_id`  must be a deployed RMRK contract.\n/// * The token with id `parent_token_id` must exist in the `parent_id` contract.\n/// * The `token_id` must not exist.\n///\n/// # Arguments:\n/// * `parent_id`: is the address of the RMRK parent contract.\n/// * `parent_token_id`: is the parent RMRK token.\n/// * `token_id`: is the tokenId of the new RMRK token.\n///\n/// On success replies [`RMRKEvent::MintToNft`].\nMintToNft {\n    parent_id: ActorId,\n    parent_token_id: TokenId,\n    token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u5f53\u521b\u5efa\u4e00\u4e2a\u5c5e\u4e8e\u53e6\u4e00\u4e2a NFT \u7684\u4ee3\u5e01\u65f6\uff0c\u5408\u7ea6\u4f1a\u5411 RMRK \u5408\u7ea6\u7684\u7236\u7ea7\u53d1\u9001\u6d88\u606f ",(0,o.kt)("inlineCode",{parentName:"p"},"AddChild"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// That message is designed to be send from another RMRK contracts\n/// when minting an NFT(child_token_id) to another NFT(parent_token_id).\n/// It adds a child to the NFT with tokenId `parent_token_id`\n/// The status of added child is `Pending`.\n///\n/// # Requirements:\n/// * Token with TokenId `parent_token_id` must exist.\n/// * There cannot be two identical children.\n///\n/// # Arguments:\n/// * `parent_token_id`: is the tokenId of the parent NFT.\n/// * `child_token_id`: is the tokenId of the child instance.\n///\n/// On success replies [`RMRKEvent::PendingChild`].\nAddChild {\n    parent_token_id: TokenId,\n    child_token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u6839\u6240\u6709\u8005\u6216\u88ab\u6279\u51c6\u7684\u8d26\u6237\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u4ee5\u4e0b\u4fe1\u606f\u63a5\u53d7\u5b50 NFT\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Accepts an RMRK child being in the `Pending` status.\n/// Removes RMRK child from `pending_children` and adds it to `accepted_children`.\n///\n/// # Requirements:\n/// * The `msg::source()` must be an RMRK owner of NFT with tokenId `parent_token_id` or an approved account.\n/// * The indicated NFT with tokenId `child_token_id` must exist in the pending array of `parent_token_id`.\n///\n/// # Arguments:\n/// * `parent_token_id`: is the tokenId of the parent NFT\n/// * `child_token_id`: is the tokenId of the child instance\n///\n/// On success replies [`RMRKEvent::AcceptedChild`].\nAcceptChild {\n    parent_token_id: TokenId,\n    child_contract_id: ActorId,\n    child_token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u6216\u62d2\u7edd\u5e26\u6709\u8be5\u4fe1\u606f\u7684\u5b50 NFT\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Rejects an RMRK child being in the `Pending` status.\n/// It sends a message to the child NFT contract to burn the NFT token from it.\n///\n/// # Requirements:\n/// * The `msg::source()` must be an RMRK owner or an approved account.\n/// * The indicated NFT with tokenId `child_token_id` must exist in the pending array of `parent_token_id`.\n///\n/// Arguments:\n/// * `parent_token_id`: is the tokenId of the parent NFT.\n/// * `child_contract_id`: is the address of the child RMRK contract.\n/// * `child_token_id`: is the tokenId of the child instance.\n///\n/// On success replies [`RMRKEvent::RejectedChild`].\nRejectChild {\n    parent_token_id: TokenId,\n    child_contract_id: ActorId,\n    child_token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u6839\u6240\u6709\u8005\u4e5f\u53ef\u4ee5\u4ece\u4ed6\u7684 NFT \u63a5\u53d7\u5b50\u8282\u70b9\u4e2d\u79fb\u9664\u5df2\u7ecf\u88ab\u63a5\u53d7\u7684\u5b50\u8282\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Removes an RMRK child being in the `Accepted` status.\n/// It sends a message to the child NFT contract to burn the NFT token from it.\n///\n/// # Requirements:\n/// * The `msg::source()` must be an RMRK owner or an approved account.\n///\n/// # Arguments:\n/// * `parent_token_id`: is the tokenId of the parent NFT.\n/// * `child_contract_id`: is the address of the child RMRK contract.\n/// * `child_token_id`: is the tokenId of the child instance.\n///\n/// On success replies [`RMRKEvent::RemovedChild`].\nRemoveChild {\n    parent_token_id: TokenId,\n    child_contract_id: ActorId,\n    child_token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u5982\u679c\u6839\u6240\u6709\u8005\u62d2\u7edd\u6216\u79fb\u9664\u5b50 NFT\uff0c\u5219\u5fc5\u987b\u4ece\u5b50 NFT \u5408\u7ea6\u4e2d\u9500\u6bc1\u5b50 NFT\u3002\u7236 NFT \u5408\u7ea6\u5411\u5b50 NFT \u5408\u7ea6\u53d1\u9001\u76f8\u5e94\u6d88\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Burns RMRK tokens. It must be called from the RMRK parent contract when the root owner removes or rejects child NFTs.\n/// The input argument is an `BTreeSet<TokenId>` since a parent contract can have multiple children that must be burnt.\n/// It also recursively sends messages [`RMRKAction::BurnFromParent`] to children of burnt tokens if any.\n///\n/// # Requirements:\n/// * The `msg::source()` must be a RMRK parent contract.\n/// * All tokens in `BTreeSet<TokenId>` must exist.\n///\n/// # Arguments:\n/// * `token_ids`: is the tokenIds of the burnt tokens.\n///\n/// On success replies [`RMRKEvent::TokensBurnt`].\nBurnFromParent {\n    child_token_ids: BTreeSet<TokenId>,\n    root_owner: ActorId,\n},\n")),(0,o.kt)("p",null,"\u88ab\u9500\u6bc1\u7684\u4ee3\u5e01\u4e5f\u53ef\u80fd\u5728\u5176\u4ed6\u5408\u7ea6\u4e2d\u6709\u5b50\u4ee3\u3002\u9500\u6bc1\u65f6\uff0c\u5b83\u4f1a\u9012\u5f52\u5730\u9500\u6bc1\u6240\u6709\u5b50\u4ee3 NFT\u3002"),(0,o.kt)("p",null,"root \u62e5\u6709\u8005\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6d88\u606f\u9500\u6bc1 NFT\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Burns RMRK token.\n/// It recursively burns all the children's NFTs.\n/// It checks whether the token is a child of another token.\n/// If so, it sends a message to the parent NFT  to remove the child.\n///\n/// # Requirements:\n/// * The `msg::source()` must be the root owner of the token.\n///\n/// # Arguments:\n/// * `token_id`: is the tokenId of the burnt token.\n///\n/// On success replies [`RMRKEvent::Transfer`].\nBurn(TokenId),\n")),(0,o.kt)("p",null,"\u9664\u4e86\u9012\u5f52\u5730\u9500\u6bc1\u4ee3\u5e01\u5916\uff0c\u5b83\u8fd8\u68c0\u67e5\u9500\u6bc1\u7684 NFT \u662f\u5426\u5c5e\u4e8e\u53e6\u4e00\u4e2a NFT\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6709\u5fc5\u8981\u901a\u8fc7\u4e0b\u9762\u7684\u6d88\u606f\u4ece\u7236\u5408\u7ea6\u7684\u5b50\u5217\u8868\u4e2d\u5220\u9664\u4ee3\u5e01\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Burns a child of NFT.\n/// That function must be called from the child RMRK contract during `transfer`, `transfer_to_nft` and `burn` functions.\n///\n/// # Requirements:\n/// * The `msg::source()` must be a child RMRK contract.\n/// * The indicated child must exist on the children list of `parent_token_id`.\n///\n/// # Arguments:\n/// * `parent_token_id`: is the tokenId of the parent NFT.\n/// * `child_token_id`: is the tokenId of the child instance.\n///\n/// On success replies [`RMRKEvent::ChildBurnt`].\nBurnChild {\n    parent_token_id: TokenId,\n    child_token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u5f53 NFT \u8f6c\u79fb\u65f6\uff0c\u76ee\u7684\u5730\u53ef\u4ee5\u662f\u4e00\u4e2a\u8d26\u6237\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a NFT\u3002\u8981\u5c06 NFT \u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u5e10\u6237\uff0c\u9700\u8981\u53d1\u9001\u4e00\u6761\u6d88\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Transfers NFT to another account.\n/// If the previous owner is another RMRK contract, it sends the message [`RMRKAction::BurnChild`] to the parent contract.\n///\n/// # Requirements:\n/// * The `token_id` must exist.\n/// * The `msg::source()` must be approved by the owner of the token.\n/// * The `to` address should be a non-zero address.\n///\n/// # Arguments:\n/// * `to`: is the receiving address.\n/// * `token_id`: is the tokenId of the transferred token.\n///\n/// On success replies [`RMRKEvent::ChildBurnt`].\nTransfer {\n    to: ActorId,\n    token_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u5982\u679c\u4e4b\u524d\u7684\u6240\u6709\u8005\u662f\u53e6\u4e00\u4e2a NFT\uff0c\u5b83\u4f1a\u5411\u7236\u5408\u7ea6\u53d1\u9001\u6d88\u606f ",(0,o.kt)("inlineCode",{parentName:"p"},"BurnChild"),"\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u5c06\u4ee3\u5e01\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a NFT\uff0c\u5219\u4f1a\u53d1\u9001\u4ee5\u4e0b\u6d88\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Transfers NFT to another NFT.\n///\n/// # Requirements:\n/// * The `token_id` must exist.\n/// * The `msg::source()` must be approved by the root owner of the token.\n/// * The `to` address should be a non-zero address\n///\n/// # Arguments:\n/// * `to`: is the address of the new parent RMRK contract.\n/// * `destination_id: is the tokenId of the parent RMRK token.\n/// * `token_id`: is the tokenId of the transferred token.\n///\n/// On success replies [`RMRKEvent::TransferToNft`].\nTransferToNft {\n    to: ActorId,\n    token_id: TokenId,\n    destination_id: TokenId,\n},\n")),(0,o.kt)("p",null,"\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6709 5 \u79cd\u53ef\u80fd\u7684\u60c5\u51b5\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6839\u6240\u6709\u8005\u5728\u4e00\u4efd\u5408\u7ea6\u4e2d\u5c06\u5b50\u4ee3\u5e01\u4ece NFT \u8f6c\u79fb\u5230\u4ed6\u7684\u53e6\u4e00\u4e2a NFT\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b50 RMRK \u5408\u7ea6\u5411\u7236 RMRK \u5408\u7ea6\u53d1\u9001\u6d88\u606f ",(0,o.kt)("inlineCode",{parentName:"li"},"TransferChild"),"\uff0c\u5e76\u5e26\u6709\u6307\u793a\u7684\u5148\u524d",(0,o.kt)("inlineCode",{parentName:"li"},"TokenId"),"\u548c\u65b0\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"TokenId"),"\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// That message is designed to be sent from another RMRK contracts\n/// when the root owner transfers his child to another parent token within one contract.\n/// If root owner transfers child token from NFT to another his NFT\n/// it adds a child to the NFT  with a status that child had before.\n/// If root owner transfers child token from NFT to another NFT that he does not own\n/// it adds a child to the NFT  with a status `Pending`.\n///\n/// # Requirements:\n/// * The `msg::source()` must be a child RMRK contract.\n/// * The `to` must be an existing RMRK token\n/// * The `root_owner` of `to` and `from` must be the same.\n///\n/// # Arguments:\n/// * `from`: RMRK token from which the child token will be transferred.\n/// * `to`: RMRK token to which the child token will be transferred.\n/// * `child_token_id`: is the tokenId of the child in the RMRK child contract.\n///\n/// On success replies [`RMRKEvent::ChildTransferred`].\nTransferChild {\n    from: TokenId,\n    to: TokenId,\n    child_token_id: TokenId,\n},\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"\u6839\u6240\u6709\u8005\u5c06\u5b50\u4ee3\u5e01\u4ece\u4e00\u4e2a\u5408\u7ea6\u4e2d\u7684 RMRK \u7236\u4ee3\u5e01\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5408\u7ea6\u4e2d\u7684 RMRK \u4ee3\u5e01\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u5b50 RMRK \u5408\u7ea6\u53d1\u9001\u6d88\u606f",(0,o.kt)("inlineCode",{parentName:"li"},"BurnChild"),"\u7ed9\u524d\u4e00\u4e2a\u7236 RMRK \u5408\u7ea6"),(0,o.kt)("li",{parentName:"ul"},"\u5b50 RMRK \u5408\u7ea6\u53d1\u9001\u6d88\u606f",(0,o.kt)("inlineCode",{parentName:"li"},"AddAcceptedChild"),"\u7ed9\u65b0\u7684\u7236 RMRK \u5408\u7ea6")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// That function is designed to be called from another RMRK contracts\n/// when the root owner transfers his child NFT to another his NFT in another contract.\n/// It adds a child to the RMRK token with tokenId `parent_token_id` with status `Accepted`.\n///\n/// # Requirements:\n/// * The `msg::source()` must be a child RMRK contract.\n/// * The `parent_token_id` must be an existing RMRK token that must have `child_token_id` in its `accepted_children`.\n///\n/// # Arguments:\n/// * `parent_token_id`: RMRK token to which the child token will be transferred.\n/// * `child_token_id`: is the tokenId of the child of the RMRK child contract.\n///\n/// On success replies [`RMRKEvent::AcceptedChild`].\nAddAcceptedChild {\n    parent_token_id: TokenId,\n    child_token_id: TokenId,\n},\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u6839\u6240\u6709\u8005\u5c06\u5b50\u4ee3\u5e01\u8f6c\u79fb\u5230\u5c5e\u4e8e\u53e6\u4e00\u4e2a\u6839\u8d26\u6237\u7684 RMRK \u4ee3\u5e01\uff1a"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u5b50 RMRK \u5408\u7ea6\u5411\u4e4b\u524d\u7684\u7236 RMRK \u5408\u7ea6\u53d1\u9001\u6d88\u606f",(0,o.kt)("inlineCode",{parentName:"li"},"BurnChild"),"\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u5b50 RMRK \u5408\u7ea6\u5411\u65b0\u7684\u7236 RMRK \u5408\u7ea6\u53d1\u9001\u6d88\u606f",(0,o.kt)("inlineCode",{parentName:"li"},"AddChild"),"\uff1b"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u8f6c\u79fb\u7684 RMRK \u4ee3\u5e01\u76f4\u63a5\u5c5e\u4e8e\u6839\u6240\u6709\u8005\uff0c\u4ed6\u5c06 RMRK \u4ee3\u5e01\u8f6c\u79fb\u5230\u4ed6\u7684\u53e6\u4e00\u4e2a RMRK \u4ee3\u5e01\uff1a\u5b50 RMRK \u5408\u7ea6\u5411\u65b0\u7684\u7236 RMRK \u5408\u7ea6\u53d1\u9001\u6d88\u606f ",(0,o.kt)("inlineCode",{parentName:"p"},"AddAcceptedChild"),"\u3002")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u8f6c\u79fb\u7684 RMRK \u4ee3\u5e01\u76f4\u63a5\u5c5e\u4e8e\u6839\u6240\u6709\u8005\uff0c\u4ed6\u5c06 RMRK \u4ee3\u5e01\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u4ed6\u4e0d\u62e5\u6709\u7684 RMRK \u4ee3\u5e01\uff1a\u5b50 RMRK \u5408\u7ea6\u5411\u65b0\u7684\u7236 RMRK \u5408\u7ea6\u53d1\u9001\u6d88\u606f ",(0,o.kt)("inlineCode",{parentName:"p"},"AddChild"),"\u3002"))),(0,o.kt)("p",null,"RMRK NFT \u6807\u51c6\u4e2d\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"approve")," \u51fd\u6570\u7c7b\u4f3c\u4e8e\u901a\u5e38\u7684 nft \u6807\u51c6\u51fd\u6570\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e ",(0,o.kt)("inlineCode",{parentName:"p"},"msg::source")," \u5fc5\u987b\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"root_owner"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Approves an account to transfer NFT.\n///\n/// # Requirements:\n/// * The `token_id` must exist.\n/// * The `msg::source()` must be approved by the root owner of the token.\n/// * The `to` address must be a non-zero address\n///\n/// # Arguments:\n/// * `to`: is the address of the approved account.\n/// * `token_id`: is the tokenId of the token.\n///\n/// On success replies [`RMRKEvent::Approval`].\nApprove {\n    to: ActorId,\n    token_id: TokenId,\n},\n")),(0,o.kt)("h3",{id:"\u591a\u8d44\u6e90\u903b\u8f91"},"\u591a\u8d44\u6e90\u903b\u8f91"),(0,o.kt)("p",null,"Multi Resource NFT \u6807\u51c6\u662f RMRK \u6982\u5ff5\u7684\u72ec\u7acb\u90e8\u5206\u3002\u5176\u601d\u60f3\u662f\u4e00\u4e2a NFT \u53ef\u4ee5\u6709\u591a\u4e2a\u8d44\u6e90\u3002"),(0,o.kt)("p",null,"NFT \u591a\u8d44\u6e90\u6709\u56db\u4e2a\u5173\u952e\u7528\u4f8b\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},"\u8de8\u5143\u5b87\u5b99\u517c\u5bb9\u6027"),"\uff1a\u4f8b\u5982\uff0c\u5177\u6709\u591a\u79cd\u8d44\u6e90\u7684 NFT \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u6e38\u620f\u4e2d\u4f7f\u7528\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},"\u591a\u5a92\u4f53\u8f93\u51fa"),"\uff1aNFT \u53ef\u4ee5\u5b58\u50a8\u4e3a\u4e0d\u540c\u7684\u6570\u5b57\u683c\u5f0f\uff08\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u3001\u7535\u5b50\u4e66\u6216\u6587\u672c\u6587\u4ef6\uff09\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},"\u5a92\u4f53\u5197\u4f59"),":\u8bb8\u591a nft \u7684\u5143\u6570\u636e\u96c6\u4e2d\u5728\u67d0\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u6216\u8005\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u786c\u7f16\u7801\u7684 IPFS \u7f51\u5173\u4e5f\u53ef\u80fd\u5b95\u673a\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f IPFS hash\u3002\u901a\u8fc7\u6dfb\u52a0\u76f8\u540c\u7684\u5143\u6570\u636e\u6587\u4ef6\u4f5c\u4e3a\u4e0d\u540c\u7684\u8d44\u6e90\uff0c\u5143\u6570\u636e\u53ca\u5176\u5f15\u7528\u7684\u5a92\u4f53\u7684\u5f39\u6027\u4f1a\u6210\u500d\u589e\u52a0\uff0c\u56e0\u4e3a\u6240\u6709\u534f\u8bae\u540c\u65f6\u762b\u75ea\u7684\u53ef\u80fd\u6027\u4f1a\u8d8a\u6765\u8d8a\u5c0f\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},"NFT \u8fdb\u5316"),"\uff1a\u8bb8\u591a NFT\uff0c\u5c24\u5176\u662f\u4e0e\u6e38\u620f\u76f8\u5173\u7684 NFT\uff0c\u90fd\u9700\u8981\u8fdb\u5316\u3002"))),(0,o.kt)("p",null,"RMRK \u5408\u7ea6\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\u6765\u5b58\u50a8\u5b83\u7684\u8d44\u6e90\u3002"),(0,o.kt)("h4",{id:"\u8d44\u6e90\u5b58\u50a8\u5408\u7ea6"},(0,o.kt)("strong",{parentName:"h4"},"\u8d44\u6e90\u5b58\u50a8\u5408\u7ea6")),(0,o.kt)("p",null,"\u5b58\u50a8\u72b6\u6001\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Default)]\npub struct ResourceStorage {\n    pub name: String,\n    // the admin is the rmrk contract that initializes the storage contract\n    pub admin: ActorId,\n    pub resources: BTreeMap<u8, Resource>,\n    pub all_resources: BTreeSet<Resource>,\n}\n")),(0,o.kt)("p",null,"\u8981\u5411\u4ee3\u5e01\u6dfb\u52a0\u8d44\u6e90\uff0cRMRK \u5408\u7ea6\u5fc5\u987b\u53d1\u9001\u4ee5\u4e0b\u6d88\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds resource entry on resource storage contract.\n///\n/// # Requirements:\n/// * The `msg::source()` must be the contract admin (RMRK contract).\n/// * `id` can not be equal to zero.\n/// * Resource with indicated `id` must not exist.\n///\n/// # Arguments:\n/// * `id`: is a resource identifier.\n/// * `src`: a string pointing to the media associated with the resource.\n/// * `thumb`: a string pointing to thumbnail media associated with the resource.\n/// * `metadata_uri`:  a string pointing to a metadata file associated with the resource.\n///\n/// On success replies [`ResourceEvent::ResourceEntryAdded`].\nAddResourceEntry {\n    id: u8,\n    src: String,\n    thumb: String,\n    metadata_uri: String,\n},\n")),(0,o.kt)("p",null,"\u8981\u83b7\u53d6\u6709\u5173\u5b58\u50a8\u4e2d\u662f\u5426\u5b58\u5728\u6b64\u7c7b\u8d44\u6e90\u7684\u4fe1\u606f\uff0c\u8bf7\u53d1\u9001\u6d88\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Used to check from the RMRK contract whether the resource with indicated id exists or not.\n///\n/// # Arguments:\n/// * `id`: is a resource identifier.\n///\n/// On success replies [`ResourceEvent::Resource`].\nGetResource {\n    id: u8,\n},\n")),(0,o.kt)("h4",{id:"rmrk-\u5408\u7ea6\u4e2d\u7684\u591a\u8d44\u6e90"},(0,o.kt)("strong",{parentName:"h4"},"RMRK \u5408\u7ea6\u4e2d\u7684\u591a\u8d44\u6e90")),(0,o.kt)("p",null,"RMRK \u5408\u7ea6\u7ba1\u7406\u5458\u53ef\u4ee5\u901a\u8fc7 RMRK \u5408\u7ea6\u5411\u5b58\u50a8\u5408\u7ea6\u6dfb\u52a0\u8d44\u6e90\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds resource entry on resource storage contract.\n/// It sends a message to the resource storage contract with information about a new resource.\n///\n/// # Requirements:\n/// * The `msg::source()` must be the contract admin.\n///\n/// Arguments:\n/// * `id`: is a resource identifier\n/// * `src`: a string pointing to the media associated with the resource.\n/// * `thumb`: a string pointing to thumbnail media associated with the resource.\n/// * `metadata_uri`:  a string pointing to a metadata file associated with the resource.\n///\n/// On success reply `[RMRKEvent::ResourceEntryAdded]`.\nAddResourceEntry {\n    id: u8,\n    src: String,\n    thumb: String,\n    metadata_uri: String,\n},\n")),(0,o.kt)("p",null,'\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u7528 propose-commit \u6a21\u5f0f\u7684\u5f62\u5f0f\u5411\u73b0\u6709\u4ee3\u5e01\u6dfb\u52a0\u8d44\u6e90\u3002\u5c06\u8d44\u6e90\u6dfb\u52a0\u5230\u4ee3\u5e01\u65f6\uff0c\u9996\u5148\u5c06\u5176\u653e\u5728"Pending"\u6570\u7ec4\u4e2d\uff0c\u5e76\u4e14\u5fc5\u987b\u7531\u4ee3\u5e01\u6240\u6709\u8005\u8fc1\u79fb\u5230"Active"\u6570\u7ec4\u4e2d\uff1a'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'/// Adds resource to an existing token.\n/// Checks that the resource with indicated id exists in the resource storage contract.\n/// Proposed resource is placed in the "Pending" array.\n/// A pending resource can be also proposed to overwrite an existing resource.\n///\n/// # Requirements\n/// Token with indicated `token_id` must exist.\n/// The proposed resource must not already exist for the token.\n/// The resource that is proposed to be overwritten must exist for the token.\n/// The length of resources in pending status must be less or equal to `MAX_RESOURCE_LEN`.\n///\n/// # Arguments:\n/// * `token_id`: an id of the token.\n/// * `resource_id`: a proposed resource.\n/// * `overwrite_id`: a resource to be overwritten.\n///\n/// On success reply `[RMRKEvent::ResourceAdded]`.\nAddResource {\n    token_id: TokenId,\n    resource_id: u8,\n    overwrite_id: u8,\n},\n')),(0,o.kt)("p",null,"\u8981\u63a5\u53d7\u8d44\u6e90\uff0c\u6839\u6240\u6709\u8005\u5fc5\u987b\u53d1\u9001\u6d88\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Accepts resource from pending list.\n/// Moves the resource from the pending array to the accepted array.\n///\n/// # Requirements\n/// Only root owner or approved account can accept a resource.\n/// `resource_id` must exist for the token in the pending array.\n///\n/// # Arguments:\n/// * `token_id`: an id of the token.\n/// * `resource_id`: a resource to be accepted.\n///\n/// On success reply  `[RMRKEvent::ResourceAccepted]`.\nAcceptResource {\n    token_id: TokenId,\n    resource_id: u8,\n},\n")),(0,o.kt)("p",null,"\u6216\u4f7f\u7528\u4ee5\u4e0b\u6d88\u606f\u62d2\u7edd\u8d44\u6e90\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Rejects a resource, dropping it from the pending array.\n///\n/// # Requirements\n/// Only root owner or approved account can reject a resource.\n/// `resource_id` must exist for the token in the pending array.\n///\n/// # Arguments:\n/// * `token_id`: an id of the token.\n/// * `resource_id`: a resource to be rejected.\n///\n/// On success reply  `[RMRKEvent::ResourceRejected]`.\nRejectResource {\n    token_id: TokenId,\n    resource_id: u8,\n},\n")),(0,o.kt)("p",null,"NFT \u591a\u4e2a\u8d44\u6e90\u6309\u6839\u6240\u6709\u8005\u8bbe\u7f6e\u7684\u4f18\u5148\u7ea7\u6392\u5e8f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"/// Sets the priority of the active resources array\n/// Priorities have a 1:1 relationship with their corresponding index in\n/// the active resources array. E.G, a priority array of [1, 3, 2] indicates\n///  that the the active resource at index 1 of the active resource array\n///  has a priority of 1, index 2 has a priority of 3, and index 3 has a priority\n///  of 2. There is no validation on priority value input; out of order indexes\n///  must be handled by the frontend.\n///\n/// # Requirements\n/// Only root owner or approved account can set priority\n/// The length of the priorities array must be equal to the present length of the active resources array\n///\n/// # Arguments:\n/// * `token_id`: an id of the token.\n/// * `priorities`: An array of priorities to set.\n///\n/// On success reply `[RMRKEvent::PrioritySet]`.\nSetPriority {\n    token_id: TokenId,\n    priorities: Vec<u8>,\n},\n")),(0,o.kt)("h2",{id:"\u6e90\u7801"},"\u6e90\u7801"),(0,o.kt)("p",null,"RMRK \u7684\u5b9e\u73b0\u5728 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/RMRK"},"GitHub"),"\u3002"),(0,o.kt)("p",null,"\u66f4\u591a\u5173\u4e8e\u5728 Gear \u4e0a\u6d4b\u8bd5\u667a\u80fd\u5408\u7ea6\u7684\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://wiki.gear-tech.io/zh-cn/developing-contracts/testing/"},"\u5e94\u7528\u6d4b\u8bd5"),"\u3002"))}u.isMDXComponent=!0}}]);