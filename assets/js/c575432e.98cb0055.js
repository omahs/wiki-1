"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6090],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1e3:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:9},o="Escrow",l={unversionedId:"examples/escrow",id:"examples/escrow",title:"Escrow",description:"Introduction",source:"@site/docs/examples/escrow.md",sourceDirName:"examples",slug:"/examples/escrow",permalink:"/docs/examples/escrow",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/escrow.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"DAO",permalink:"/docs/examples/DAO"},next:{title:"Game of chance",permalink:"/docs/examples/game-of-chance"}},i={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Logic",id:"logic",level:2},{value:"Interface",id:"interface",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Actions",id:"actions",level:3},{value:"Meta state queries",id:"meta-state-queries",level:3},{value:"User interface",id:"user-interface",level:2},{value:"Configure basic dApp in .env:",id:"configure-basic-dapp-in-env",level:3},{value:"Program metadata and state",id:"program-metadata-and-state",level:2},{value:"Source code",id:"source-code",level:2}],u={toc:c};function p(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"escrow"},"Escrow"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"An escrow is a special wallet to which some assets (e.g. money or stocks) are deposited and stored until certain conditions are met. In terms of smart contracts, an escrow is a wallet that is stored on a blockchain and, like a regular escrow, can receive some assets (e.g. a cryptocurrency or fungible tokens (like ",(0,r.kt)("a",{parentName:"p",href:"/docs/examples/gft-20"},"Gear fungible tokens - gFT")," in this example)) from one user and, when certain conditions are met, send them to another."),(0,r.kt)("p",null,"This article explains at a superficial level the purpose and logic of this smart contract. The source code of the smart contract example is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/escrow"},"GitHub"),"."),(0,r.kt)("h2",{id:"logic"},"Logic"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Any user can create an escrow wallet as a buyer or seller."),(0,r.kt)("li",{parentName:"ul"},"A buyer can make a deposit or confirm a deal and close a wallet."),(0,r.kt)("li",{parentName:"ul"},"A seller can refund tokens from a paid wallet to a buyer."),(0,r.kt)("li",{parentName:"ul"},"Both buyer and seller can cancel a deal and close an unpaid wallet.")),(0,r.kt)("p",null,"One escrow wallet contains info about a ",(0,r.kt)("inlineCode",{parentName:"p"},"buyer"),", a ",(0,r.kt)("inlineCode",{parentName:"p"},"seller"),", wallet ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," of tokens that this wallet can store:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Wallet {\n    /// A buyer.\n    pub buyer: ActorId,\n    /// A seller.\n    pub seller: ActorId,\n    /// A wallet state.\n    pub state: WalletState,\n    /// An amount of tokens that a wallet can have. **Not** a current amount on\n    /// a wallet balance!\n    pub amount: u128,\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"WalletState")," is an enum that stores a current state of a wallet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum WalletState {\n    AwaitingDeposit,\n    AwaitingConfirmation,\n    Closed,\n}\n")),(0,r.kt)("h2",{id:"interface"},"Interface"),(0,r.kt)("h3",{id:"initialization"},"Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Initializes an escrow program.\n#[derive(Decode, Encode, TypeInfo)]\npub struct InitEscrow {\n    /// Address of a fungible token program.\n    pub ft_program_id: ActorId,\n}\n")),(0,r.kt)("h3",{id:"actions"},"Actions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// An enum to send the program info about what it should do.\n///\n/// After a successful processing of this enum, the program replies with [`EscrowEvent`].\n#[derive(Decode, Encode, TypeInfo)]\npub enum EscrowAction {\n    /// Creates one escrow wallet and replies with its ID.\n    ///\n    /// # Requirements\n    /// * [`msg::source()`](gstd::msg::source) must be `buyer` or `seller` for this wallet.\n    /// * `buyer` or `seller` mustn't have the zero address.\n    ///\n    /// On success, returns [`EscrowEvent::Created`].\n    Create {\n        /// A buyer.\n        buyer: ActorId,\n        /// A seller.\n        seller: ActorId,\n        /// An amount of tokens.\n        amount: u128,\n    },\n\n    /// Makes a deposit from a buyer to an escrow wallet\n    /// and changes wallet's [`WalletState`] to [`AwaitingConfirmation`](WalletState::AwaitingConfirmation).\n    ///\n    /// Transfers tokens to an escrow wallet until a deal is confirmed (by [`EscrowAction::Confirm`]) or cancelled ([`EscrowAction::Cancel`]).\n    ///\n    /// # Requirements\n    /// * [`msg::source()`](gstd::msg::source) must be a buyer for this wallet.\n    /// * Wallet mustn't be paid or closed (that is, wallet's [`WalletState`] must be [`AwaitingDeposit`](WalletState::AwaitingDeposit)).\n    ///\n    /// On success, returns [`EscrowEvent::Deposited`].\n    Deposit(\n        /// A wallet ID.\n        WalletId,\n    ),\n\n    /// Confirms a deal by transferring tokens from an escrow wallet\n    /// to a seller and changing wallet's [`WalletState`] to [`Closed`](WalletState::Closed).\n    ///\n    /// Transfers tokens from an escrow wallet to a seller for this wallet.\n    ///\n    /// # Requirements\n    /// * [`msg::source()`](gstd::msg::source) must be a buyer for this wallet.\n    /// * Wallet must be paid and unclosed (that is, wallet's [`WalletState`] must be [`AwaitingDeposit`](WalletState::AwaitingConfirmation)).\n    ///\n    /// On success, returns [`EscrowEvent::Confirmed`].\n    Confirm(\n        /// A wallet ID.\n        WalletId,\n    ),\n\n    /// Refunds tokens from an escrow wallet to a buyer\n    /// and changes wallet's [`WalletState`] back to [`AwaitingDeposit`](WalletState::AwaitingDeposit)\n    /// (that is, a wallet can be reused).\n    ///\n    /// Refunds tokens from an escrow wallet to a buyer for this wallet.\n    ///\n    /// # Requirements\n    /// * [`msg::source()`](gstd::msg::source) must be a seller for this wallet.\n    /// * Wallet must be paid and unclosed (that is, wallet's [`WalletState`] must be [`AwaitingDeposit`](WalletState::AwaitingConfirmation)).\n    ///\n    /// On success, returns [`EscrowEvent::Refunded`].\n    Refund(\n        /// A wallet ID.\n        WalletId,\n    ),\n\n    /// Cancels a deal and closes an escrow wallet by changing its [`WalletState`] to [`Closed`](WalletState::Closed).\n    ///\n    /// # Requirements\n    /// * [`msg::source()`](gstd::msg::source) must be a buyer or seller for this wallet.\n    /// * Wallet mustn't be paid or closed (that is, wallet's [`WalletState`] must be [`AwaitingDeposit`](WalletState::AwaitingDeposit)).\n    ///\n    /// On success, returns [`EscrowEvent::Cancelled`].\n    Cancel(\n        /// A wallet ID.\n        WalletId,\n    ),\n}\n")),(0,r.kt)("h3",{id:"meta-state-queries"},"Meta state queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// An enum for requesting the program state.\n///\n/// After a successful processing of this enum, the program replies with [`EscrowStateReply`].\n#[derive(Decode, Encode, TypeInfo)]\npub enum EscrowState {\n    /// Gets wallet info.\n    ///\n    /// On success, returns [`EscrowStateReply::Info`].\n    Info(\n        /// A wallet ID.\n        WalletId,\n    ),\n    /// Gets all created wallets.\n    ///\n    /// On success, returns [`EscrowStateReply::CreatedWallets`].\n    CreatedWallets,\n}\n")),(0,r.kt)("h2",{id:"user-interface"},"User interface"),(0,r.kt)("p",null,"A Ready-to-Use application example provides a user interface that interacts with Escrow smart contract running in Gear Network."),(0,r.kt)("p",null,"This video demonstrates how to configure and run Escrow application on your own and explains the user interaction workflow: ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://youtu.be/CD8j4epEY4E"},"https://youtu.be/CD8j4epEY4E"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img alt",src:n(7578).Z,width:"3817",height:"1777"})),(0,r.kt)("p",null,"The application's source code is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/tree/main/apps/escrow"},"GitHub"),"."),(0,r.kt)("h3",{id:"configure-basic-dapp-in-env"},"Configure basic dApp in .env:"),(0,r.kt)("p",null,"For proper application functioning, one needs to create ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file and adjust an environment variable parameters. An example is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/blob/main/apps/escrow/.env.example"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"REACT_APP_NODE_ADDRESS\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_NODE_ADDRESS")," is the Gear Network's address (wss://rpc-node.gear-tech.io:443)")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In order for all features to work as expected, the node and its runtime version should be chosen based on the current @gear-js/api version."),(0,r.kt)("p",{parentName:"admonition"},"In case of issues with the application, try to switch to another network or run your own local node and specify its address in the .env file. When applicable, make sure the smart contract(s) wasm files are uploaded and running in this network accordingly.")),(0,r.kt)("h2",{id:"program-metadata-and-state"},"Program metadata and state"),(0,r.kt)("p",null,"Metadata interface description:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct EscrowMetadata;\n\nimpl Metadata for EscrowMetadata {\n    type Init = In<InitEscrow>;\n    type Handle = InOut<EscrowAction, EscrowEvent>;\n    type Others = ();\n    type Reply = ();\n    type Signal = ();\n    type State = Escrow;\n}\n")),(0,r.kt)("p",null,"To display the full contract state information, the ",(0,r.kt)("inlineCode",{parentName:"p"},"state()")," function is used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nextern "C" fn state() {\n    msg::reply(\n        unsafe { ESCROW.clone().expect("Uninitialized escrow state") },\n        0,\n    )\n    .expect("Failed to share state");\n}\n')),(0,r.kt)("p",null,"To display only necessary certain values from the state, you need to write a separate crate. In this crate, specify functions that will return the desired values from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Escrow")," state. For example - ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/escrow/tree/master/state"},"gear-dapps/escrow/state"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[metawasm]\npub trait Metawasm {\n    type State = <EscrowMetadata as Metadata>::State;\n\n    fn info(wallet_id: U256, state: Self::State) -> Wallet {\n        ...\n    }\n\n    fn created_wallets(state: Self::State) -> Vec<(WalletId, Wallet)> {\n        ...\n    }\n}\n")),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("p",null,"The source code of the Escrow smart contract example as well as its testing implementation is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/escrow"},"GitHub"),". They can be used as is or modified to suit your own scenarios."),(0,r.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/developing-contracts/testing"},"Program Testing")," article."))}p.isMDXComponent=!0},7578:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/escrow-d2b6bf1bf1f1b227f1b40b35d1c53dad.png"}}]);