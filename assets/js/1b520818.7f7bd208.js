"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3831],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"State Functions",sidebar_position:4},i="Store data",s={unversionedId:"developing-contracts/state",id:"developing-contracts/state",title:"Store data",description:"Persistent data of the Gear smart contract is stored in the same way as in a classic program and does not require initialization of the external storage.",source:"@site/docs/developing-contracts/state.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/state",permalink:"/docs/developing-contracts/state",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/state.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"State Functions",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Mailbox",permalink:"/docs/developing-contracts/mailbox"},next:{title:"Metadata",permalink:"/docs/developing-contracts/metadata"}},l={},c=[{value:"State functions",id:"state-functions",level:2},{value:"Custom program to read the state",id:"custom-program-to-read-the-state",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"store-data"},"Store data"),(0,r.kt)("p",null,"Persistent data of the Gear smart contract is stored in the same way as in a classic program and does not require initialization of the external storage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// ...\n// describe state structure\n#[derive(TypeInfo, Decode, Encode, Clone)]\npub struct Wallet {\n    pub id: ActorId,\n    pub person: String,\n}\n\n// declare and initialize the state\nstatic mut WALLETS: Vec<Wallet> = Vec::new();\n")),(0,r.kt)("p",null,"If you're programming in Rust or other object-oriented languages, you should be familiar with most types. However, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ActorId")," type is something new when developing contracts via the Gear Protocol."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"ActorId")," is a special type that represents an 32 bytes array and defines any ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," in Gear Protocol.")),(0,r.kt)("h2",{id:"state-functions"},"State functions"),(0,r.kt)("p",null,"To display the contract State information (similar to the ",(0,r.kt)("inlineCode",{parentName:"p"},"view")," functions), the ",(0,r.kt)("inlineCode",{parentName:"p"},"state()")," function is used. It allows you to instantly read the contract status (for example, contract balance). Reading State is a free function and does not require gas costs."),(0,r.kt)("p",null,"To return State use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nextern "C" fn state() {\n    msg::reply(unsafe { WALLETS.clone() }, 0).expect("Failed to share state");\n}\n')),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"state()")," function returns the whole state of the contract."),(0,r.kt)("h2",{id:"custom-program-to-read-the-state"},"Custom program to read the state"),(0,r.kt)("p",null,"Additionally, you can create your own program to read the state. This wrapper will allow you to implement custom functions for the client side, not depending on the main program."),(0,r.kt)("p",null,"This has a number of advantages, for example, you will always be able to read the state even if the program changes (as long as the incoming or outgoing types have not changed). Or you are creating a service based on an already existing program and you need some of your own functions to get your own chanks of data from the state."),(0,r.kt)("p",null,"To do this, we need to create an independent program and describe the necessary functions inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"metawasm")," trait. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// ...\nuse gmeta::metawasm;\n\n#[metawasm]\npub trait Metawasm {\n    type State = Vec<Wallet>;\n\n    fn all_wallets(state: Self::State) -> Vec<Wallet> {\n        state\n    }\n\n    fn first_wallet(state: Self::State) -> Option<Wallet> {\n        state.first().cloned()\n    }\n\n    fn last_wallet(state: Self::State) -> Option<Wallet> {\n        state.last().cloned()\n    }\n}\n")),(0,r.kt)("p",null,"Or more complex example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// ...\nuse gmeta::metawasm;\n\n#[metawasm]\npub trait Metawasm {\n    type State = Vec<Wallet>;\n\n    fn wallet_by_id(id: Id, state: Self::State) -> Option<Wallet> {\n        state.into_iter().find(|w| w.id == id)\n    }\n\n    fn wallet_by_person(person: String, state: Self::State) -> Option<Wallet> {\n        state.into_iter().find(|w| w.person == person)\n    }\n}\n")),(0,r.kt)("p",null,"To build ",(0,r.kt)("inlineCode",{parentName:"p"},"meta.wasm"),", the following ",(0,r.kt)("inlineCode",{parentName:"p"},"build.rs")," file in the root of your project is required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn main() {\n    gear_wasm_builder::build_metawasm();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/developing-contracts/metadata/"},"Learn more")," how ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," works."))}d.isMDXComponent=!0}}]);