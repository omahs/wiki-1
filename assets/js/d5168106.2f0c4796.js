"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8593],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),s=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(f,i(i({ref:t},l),{},{components:n})):o.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},41:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_label:"Data Encoding/Decoding",sidebar_position:6},i="Data encoding/decoding",c={unversionedId:"developing-contracts/codec",id:"developing-contracts/codec",title:"Data encoding/decoding",description:"To optimize how data is sent and received over the network, Gear uses the parity-scale-codec - a Rust implementation of the SCALE Codec. This codec is used by the Substrate nodes' internal runtime. SCALE is a lightweight format that enables the serialization and deserialization of data. Encoding (and decoding) data using SCALE makes it highly suitable for resource-constrained execution environments like blockchain runtimes and low-power/low-memory devices.",source:"@site/docs/developing-contracts/codec.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/codec",permalink:"/docs/developing-contracts/codec",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/codec.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Data Encoding/Decoding",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Metadata",permalink:"/docs/developing-contracts/metadata"},next:{title:"Asynchronous Programming",permalink:"/docs/developing-contracts/interactions-between-programs"}},d={},s=[{value:"<code>scale-info</code>",id:"scale-info",level:2}],l={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"data-encodingdecoding"},"Data encoding/decoding"),(0,a.kt)("p",null,"To optimize how data is sent and received over the network, Gear uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"parity-scale-codec")," - a Rust implementation of the SCALE Codec. This codec is used by the Substrate nodes' internal runtime. SCALE is a lightweight format that enables the serialization and deserialization of data. Encoding (and decoding) data using SCALE makes it highly suitable for resource-constrained execution environments like blockchain runtimes and low-power/low-memory devices."),(0,a.kt)("p",null,"To use SCALE codec in your program, you should add it in ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\n\n// ...\ncodec = { package = "parity-scale-codec", version = "3.1.2", default-features = false }\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use codec::{Decode, Encode};\n\n#[derive(Encode, Decode)]\nenum MyType {\n    MyStruct { field: ... },\n    ...\n}\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"We only need the Encode and Decode trait when using wrapped methods from ",(0,a.kt)("inlineCode",{parentName:"p"},"gstd"),", such as: ",(0,a.kt)("inlineCode",{parentName:"p"},"msg::send"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"msg::reply"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"send_for_reply")," etc. In methods like ",(0,a.kt)("inlineCode",{parentName:"p"},"send_byte")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"reply_bytes")," we operate with a set of bytes, so nothing needs to be decoded/encoded.")),(0,a.kt)("p",null,"Learn more about SCALE Codec ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/parity-scale-codec"},"here"),"."),(0,a.kt)("h2",{id:"scale-info"},(0,a.kt)("inlineCode",{parentName:"h2"},"scale-info")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"scale-info")," is a library to describe Rust types, intended for providing information about the structure of encodable SCALE types."),(0,a.kt)("p",null,"The definitions provide third party tools (e.g. a UI client) with information about how they are able to decode types agnostic of language. The interface that uses ",(0,a.kt)("inlineCode",{parentName:"p"},"scale-info")," for Gear programs is called the ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata"),". It defines incoming and outgoing types for all necessary entry points and allows contracts and the client part to understand each other."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/developing-contracts/metadata"},"Learn more")," how to use ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata")," in contract.")),(0,a.kt)("p",null,"To use ",(0,a.kt)("inlineCode",{parentName:"p"},"scale-info")," in your project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\n\n// ...\nscale-info = { version = "2.1.1", default-features = false, features = ["derive"] }\n')),(0,a.kt)("p",null,"Learn more about ",(0,a.kt)("inlineCode",{parentName:"p"},"scale-info")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/scale-info"},"here")))}p.isMDXComponent=!0}}]);