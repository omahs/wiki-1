"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9828],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(r),g=n,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||o;return r?a.createElement(m,s(s({ref:t},p),{},{components:r})):a.createElement(m,s({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},278:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:8},s="Gas Reservation",i={unversionedId:"developing-contracts/gas-reservation",id:"developing-contracts/gas-reservation",title:"Gas Reservation",description:"Gas reservation is the powerful feature of Gear Protocol that enables the new approach to smart-contract programming and modern use cases.",source:"@site/docs/developing-contracts/gas-reservation.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/gas-reservation",permalink:"/docs/developing-contracts/gas-reservation",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/gas-reservation.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Create Program",permalink:"/docs/developing-contracts/create"},next:{title:"Delayed Messages",permalink:"/docs/developing-contracts/delayed-messages"}},c={},l=[],p={toc:l};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"gas-reservation"},"Gas Reservation"),(0,n.kt)("p",null,"Gas reservation is the powerful feature of Gear Protocol that enables the new approach to smart-contract programming and modern ",(0,n.kt)("a",{parentName:"p",href:"../gear/distinctive-features"},"use cases"),"."),(0,n.kt)("p",null,"Briefly, a program can send a message using gas that was reserved before instead of using gas from the currently processing message."),(0,n.kt)("p",null,"One of the key advantage of this feature is an ability of sending ",(0,n.kt)("a",{parentName:"p",href:"/docs/developing-contracts/delayed-messages"},"messages delayed")," in time automatically to any actor in the network - a user or another smart contract as well as to ",(0,n.kt)("strong",{parentName:"p"},"itself"),". In fact, a program is able to execute itself ",(0,n.kt)("strong",{parentName:"p"},"unlimited")," number of blocks (provided that enough gas for execution is kept available)."),(0,n.kt)("p",null,"A program developer can provide a special function in the program's code which takes some defined amount of gas from the amount available for this program and reserves it. A reservation gets a unique identifier that can be used by a program to get this reserved gas and use it later.\nTo reserve the amount of gas for further usage use the following function:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let reservation_id = ReservationId::reserve(RESERVATION_AMOUNT, TIME)\n                                    .expect("reservation across executions");\n')),(0,n.kt)("p",null,"You also have to indicate the block count within which the reserve must be used. Gas reservation is not free: the reservation for one block costs 100 gas. The ",(0,n.kt)("inlineCode",{parentName:"p"},"reserve")," function returns ",(0,n.kt)("inlineCode",{parentName:"p"},"ReservationId"),", which one can use for sending a message with that gas. To send a message using the reserved gas:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'msg::send_from_reservation(reservation_id, program, payload, value)\n                                .expect("Failed to send message from reservation");\n')),(0,n.kt)("p",null,"If gas is not needed within the time specified during the reservation, it can be unreserved and the gas will be returned to the user who made the reservation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'id.unreserve().expect("unreservation across executions");\n')),(0,n.kt)("p",null,"Programs can have different executions, change state and evaluate somehow, but when it is necessary, a program can send a message with this reserved gas instead of using its own gas."),(0,n.kt)("p",null,"For example, let's consider the game that works completely on-chain. The players are smart contracts that compete with each other by implementing various playing strategies. Usually, in these types of games, there is a master contract that starts the game and controls the move order between the players.\nTo start the game, someone sends a message to the contract. The gas attached to this message is spent on the players' contracts, which in turn spend gas on their execution. Since the game can last quite a lot of rounds, the attached gas may not be enough to complete the game. You can send a message asking the program to continue the game, or you can use the gas reservation and make a fully automatic play.\nUsing gas reservation the contract will be able to hold the game without interruption."))}u.isMDXComponent=!0}}]);