"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6058],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return r?n.createElement(g,i(i({ref:t},u),{},{components:r})):n.createElement(g,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6966:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_label:"Prerequisites",sidebar_position:1},i="Gear Examples",l={unversionedId:"examples/prerequisites",id:"examples/prerequisites",title:"Gear Examples",description:"Gear provides a set of examples that can be used for your familiarization with writing programs on Gear or become the basis for your own dApp//github.com/gear-dapps.",source:"@site/docs/examples/prerequisites.md",sourceDirName:"examples",slug:"/examples/prerequisites",permalink:"/docs/examples/prerequisites",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/prerequisites.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Prerequisites",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Testing with gclient",permalink:"/docs/developing-contracts/testing-gclient"},next:{title:"PING-PONG",permalink:"/docs/examples/ping"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"First steps",id:"first-steps",level:2},{value:"Building Rust Contract",id:"building-rust-contract",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gear-examples"},"Gear Examples"),(0,a.kt)("p",null,"Gear provides a set of examples that can be used for your familiarization with writing programs on Gear or become the basis for your own dApp: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps"},"https://github.com/gear-dapps"),"."),(0,a.kt)("p",null,"You can write your own smart contract or try to build from examples. Let's Rock!"),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,"To develop your first Rust smart-contract you would have to install some components."),(0,a.kt)("admonition",{title:"Note",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Windows users may encounter some problems related to the installation of Rust components and dependencies.\nIt is highly recommended to use Linux or macOS for compiling Gear node and smart-contracts. ")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Linux users should generally install ",(0,a.kt)("inlineCode",{parentName:"p"},"GCC")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Clang"),", according to their distribution\u2019s documentation. Also, one should install ",(0,a.kt)("inlineCode",{parentName:"p"},"binaryen")," toolset that contains required ",(0,a.kt)("inlineCode",{parentName:"p"},"wasm-opt")," tool."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For example, on Ubuntu use:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install -y clang build-essential binaryen cmake protobuf-compiler\n"))),(0,a.kt)("li",{parentName:"ul"},"On macOS, you can get a compiler toolset and ",(0,a.kt)("inlineCode",{parentName:"li"},"binaryen")," by running:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"xcode-select --install\nbrew install binaryen\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Install Rustup:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Add Wasm target to your toolchain:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"rustup toolchain add nightly\nrustup target add wasm32-unknown-unknown --toolchain nightly\n")))),(0,a.kt)("h2",{id:"first-steps"},"First steps"),(0,a.kt)("p",null,"To create our app project use the command ",(0,a.kt)("strong",{parentName:"p"},"cargo"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo new gear-app --lib\n")),(0,a.kt)("p",null,"The project structure is following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  \u2514\u2500\u2500 gear-app // Your contract dir\n      \u2502\n      \u251c\u2500\u2500 src // Source files of your program\n      \u2502    \u251c\u2500\u2500 maybe_some_file.rs // Additional module if needed\n      \u2502    \u2514\u2500\u2500 lib.rs // Main file of your program\n      \u2502\n      \u2514\u2500\u2500 Cargo.toml // Manifest of your program\n")),(0,a.kt)("p",null,"Create file ",(0,a.kt)("inlineCode",{parentName:"p"},"build.rs")," with the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn main() {\n    gear_wasm_builder::build();\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," is a project manifest in Rust, it contains all metadata necessary for compiling the project.\nConfigure the ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," similarly to how it is configured ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/ping/blob/master/Cargo.toml"},"ping/Cargo.toml"),". You can refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/getting-started-in-5-minutes"},"Getting Started")," for additional details."),(0,a.kt)("h2",{id:"building-rust-contract"},"Building Rust Contract"),(0,a.kt)("p",null,"We should compile our smart contract in the app folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build --release\n")),(0,a.kt)("p",null,"Our application should compile successfully and the final file ",(0,a.kt)("inlineCode",{parentName:"p"},"target/wasm32-unknown-unknown/release/gear-app.wasm")," should appear."))}c.isMDXComponent=!0}}]);