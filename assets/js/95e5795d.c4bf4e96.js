"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[758],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),s=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=s(a),d=r,g=u["".concat(i,".").concat(d)]||u[d]||c[d]||o;return a?n.createElement(g,l(l({ref:t},m),{},{components:a})):n.createElement(g,l({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4976:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:2,sidebar_label:"Meta CLI"},l="Gear Meta CLI",p={unversionedId:"api/tooling/meta-cli",id:"api/tooling/meta-cli",title:"Gear Meta CLI",description:"CLI tool to encode/decode payloads and work with .meta.wasm files.",source:"@site/docs/api/tooling/meta-cli.md",sourceDirName:"api/tooling",slug:"/api/tooling/meta-cli",permalink:"/docs/api/tooling/meta-cli",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/tooling/meta-cli.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Meta CLI"},sidebar:"tutorialSidebar",previous:{title:"Create-Gear-App",permalink:"/docs/api/tooling/create-gear-app"},next:{title:"Web3",permalink:"/docs/general/web3"}},i={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Full list of commmands",id:"full-list-of-commmands",level:3},{value:"Available commands",id:"available-commands",level:3},{value:"Examples",id:"examples",level:2}],m={toc:s};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gear-meta-cli"},"Gear Meta CLI"),(0,r.kt)("p",null,"CLI tool to encode/decode payloads and work with .meta.wasm files."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install -g @gear-js/gear-meta\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn global add @gear-js/gear-meta\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"full-list-of-commmands"},"Full list of commmands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"gear-meta --help\n")),(0,r.kt)("h3",{id:"available-commands"},"Available commands"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"decode")," - ",(0,r.kt)("em",{parentName:"p"},"Decode payload from hex")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"encode")," - ",(0,r.kt)("em",{parentName:"p"},"Encode payload to hex")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"meta")," - ",(0,r.kt)("em",{parentName:"p"},"Display metadata from .meta.wasm")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"type")," - ",(0,r.kt)("em",{parentName:"p"},"Display type structure for particular type from .meta.wasm")),(0,r.kt)("p",null,"You can simply run these commands and you will be prompted to enter the necessary data. Or you can specify data through options:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-t, --type")," - ",(0,r.kt)("em",{parentName:"p"},"Type to encode or decode the payload. If it is not specified you can select it later")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-m, --meta")," - ",(0,r.kt)("em",{parentName:"p"},"Path to .meta.wasm file with program's metadata")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-o --output")," - ",(0,r.kt)("em",{parentName:"p"},"Output JSON file. If it doesn't exist it will be created")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"-j --payloadFromJson")," - ",(0,r.kt)("em",{parentName:"p"},"If need to take the payload from json")),(0,r.kt)("p",null,"All of these options are available for ",(0,r.kt)("inlineCode",{parentName:"p"},"decode")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"encode")," commands\n",(0,r.kt)("inlineCode",{parentName:"p"},"-o --output")," option is available for ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," command\n",(0,r.kt)("inlineCode",{parentName:"p"},"-m, --meta")," option is available for ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," command"),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'gear-meta encode \'{"amount": 8, "currency": "GRT"}\' -t init_input -m ./path/to/demo_meta.meta.wasm\n\n# Output:\n  # Result:\n  # 0x080c475254\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"gear-meta decode '0x080c475254' -t init_input -m ./path/to/demo_meta.meta.wasm\n\n# Output:\n  # Result:\n  # { amount: '8', currency: 'GRT' }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"gear-meta type handle_input -m ./path/to/demo_meta.meta.wasm\n\n# Output:\n  # TypeName:  MessageIn\n  # { id: { decimal: 'u64', hex: 'Bytes' } }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"gear-meta meta ./path/to/demo_meta.meta.wasm\n\n# Output:\n  # Result:\n  # {\n  #   types: '0x50000824646...0000023800',\n  #   init_input: 'MessageInitIn',\n  #   init_output: 'MessageInitOut',\n  #   async_init_input: 'MessageInitAsyncIn',\n  #   async_init_output: 'MessageInitAsyncOut',\n  #   handle_input: 'MessageIn',\n  #   handle_output: 'MessageOut',\n  #   async_handle_input: 'MessageHandleAsyncIn',\n  #   async_handle_output: 'MessageHandleAsyncOut',\n  #   title: 'Example program with metadata',\n  #   meta_state_input: 'Option<Id>',\n  #   meta_state_output: 'Vec<Wallet>',\n  #   meta_state: undefined\n  # }\n")))}c.isMDXComponent=!0}}]);