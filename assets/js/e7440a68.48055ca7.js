"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3436],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>p});var o=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var u=o.createContext({}),l=function(n){var e=o.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=l(n.components);return o.createElement(u.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,u=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),d=l(t),p=a,f=d["".concat(u,".").concat(p)]||d[p]||m[p]||r;return t?o.createElement(f,i(i({ref:e},c),{},{components:t})):o.createElement(f,i({ref:e},c))}));function p(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=n,s.mdxType="string"==typeof n?n:a,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6856:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={sidebar_label:"gMT (ERC-1155)",sidebar_position:6},i="Gear Multiple Token (gMT)",s={unversionedId:"examples/gmt-1155",id:"examples/gmt-1155",title:"Gear Multiple Token (gMT)",description:"Introduction",source:"@site/docs/examples/gmt-1155.md",sourceDirName:"examples",slug:"/examples/gmt-1155",permalink:"/docs/examples/gmt-1155",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/gmt-1155.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"gMT (ERC-1155)",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"gNFT (ERC-4907)",permalink:"/docs/examples/gnft-4907"},next:{title:"Gear Feeds",permalink:"/docs/examples/feeds"}},u={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Default multitoken implementation",id:"default-multitoken-implementation",level:2},{value:"Developing your multitoken contract",id:"developing-your-multitoken-contract",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:l};function m(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gear-multiple-token-gmt"},"Gear Multiple Token (gMT)"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"A standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens or other configurations (e.g. semi-fungible tokens)."),(0,a.kt)("p",null,"The idea is simple and seeks to create a smart contract interface that can represent and control any number of fungible and non-fungible token types. In this way, the gMT token can do the same functions as a GFT and GNFT token, and even both at the same time. Can be considered as analog of ERC-1155."),(0,a.kt)("p",null,"This article explains the programming interface, data structure, basic functions and explains their purpose. It can be used as is or modified to suit your own scenarios. Anyone can easily create their own application and run it on the Gear Network. The source code is available on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/multitoken"},"GitHub"),"."),(0,a.kt)("h2",{id:"default-multitoken-implementation"},"Default multitoken implementation"),(0,a.kt)("p",null,"The functions that must be supported by each multi-token contract:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"mint(to, []token_id, []metadata, []amounts)")," - is a function that creates single/multiple new tokens (with the corresponding supply from amounts array). Metadata can include any information about the token: it can be a link to a specific resource, a description of the token, etc. Metadata is stored for NFTs only;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"burn(from, []token_id, []amounts)")," - is a function that removes the specified amounts of tokens with mentioned ids from the contract;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"transfer(to, []token_id, []amounts)")," - is a function that allows you to transfer tokens with the token_id  to the to account;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"approve/revoke approval(approved account, token_id)")," - is a function that allows you to give the right to dispose of the token to the specified approved_account. This functionality can be useful on marketplaces or auctions as when the owner wants to sell his token, they can put it on a marketplace/auction, so the contract will be able to send this token to the new owner at some point;"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"balance(account)")," - is a function that returns the ids and amounts of different tokens a user has in possession;")),(0,a.kt)("p",null,"The default implementation of the NFT contract is provided in the Gear library: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/gear-lib/tree/master/lib/src/multitoken"},"gear-lib/multitoken"),"."),(0,a.kt)("p",null,"To use the default implementation you should include the packages into your Cargo.toml file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'gear-contract-libraries = { path = "https://github.com/gear-dapps/gear-lib" }\nderive_traits = { path = "https://github.com/gear-dapps/gear-lib/tree/master/derive" }\nhashbrown = "0.13.1"\n')),(0,a.kt)("p",null,"The states that multitoken contract store are defined in the struct MTKState:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use hashbrown::HashMap;\n\n#[derive(Debug, Default)]\npub struct MTKState {\n    pub name: String,\n    pub symbol: String,\n    pub base_uri: String,\n    pub balances: HashMap<TokenId, HashMap<ActorId, u128>>,\n    pub approvals: HashMap<ActorId, HashMap<ActorId, bool>>,\n    pub token_metadata: HashMap<TokenId, TokenMetadata>,\n    // owner for nft\n    pub owners: HashMap<TokenId, ActorId>,\n}\n")),(0,a.kt)("p",null,"To reuse the default struct you need derive the MTKTokenState trait and mark the corresponding field with the #","[MTKStateKeeper]"," attribute. You can also add your fields in your MTK contract. For example, let's add the owner's address to the contract, the token_id that will track the current number of token and the supply to store how many of differnt tokens were minted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use derive_traits::{MTKCore, MTKTokenState, StateKeeper};\nuse gear_contract_libraries::multitoken::{io::*, mtk_core::*, state::*};\nuse hashbrown::HashMap;\n\n#[derive(Debug, Default, MTKTokenState, MTKCore, StateKeeper)]\npub struct SimpleMTK {\n    #[MTKStateKeeper]\n    pub tokens: MTKState,\n    pub token_id: TokenId,\n    pub owner: ActorId,\n    pub supply: HashMap<TokenId, u128>,\n}\n")),(0,a.kt)("p",null,"To inherit the default logic functions you need to derive MTKCore trait. Accordingly, for reading contracts states you need MTKTokenState trait."),(0,a.kt)("p",null,"Let's write the whole implementation of the MTK contract. First, we define the message which will initialize the contract and messages that our contract will process:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct InitMTK {\n    pub name: String,\n    pub symbol: String,\n    pub base_uri: String,\n}\n\n#[derive(Debug, Encode, Decode, TypeInfo)]\npub enum MTKAction {\n    Mint {\n        token_id: TokenId,\n        amount: u128,\n        token_metadata: Option<TokenMetadata>,\n    },\n    Burn {\n        token_id: TokenId,\n        amount: u128,\n    },\n    BalanceOf {\n        account: ActorId,\n        id: TokenId,\n    },\n    BalanceOfBatch {\n        accounts: Vec<ActorId>,\n        ids: Vec<TokenId>,\n    },\n    MintBatch {\n        ids: Vec<TokenId>,\n        amounts: Vec<u128>,\n        tokens_metadata: Vec<Option<TokenMetadata>>,\n    },\n    TransferFrom {\n        from: ActorId,\n        to: ActorId,\n        id: TokenId,\n        amount: u128,\n    },\n    BatchTransferFrom {\n        from: ActorId,\n        to: ActorId,\n        ids: Vec<TokenId>,\n        amounts: Vec<u128>,\n    },\n    BurnBatch {\n        ids: Vec<TokenId>,\n        amounts: Vec<u128>,\n    },\n    Approve {\n        account: ActorId,\n    },\n    RevokeApproval {\n        account: ActorId,\n    },\n}\n")),(0,a.kt)("p",null,"Then the default MTK contract implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, Default, MTKTokenState, MTKCore, StateKeeper)]\npub struct SimpleMTK {\n    #[MTKStateKeeper]\n    pub tokens: MTKState,\n    pub token_id: TokenId,\n    pub owner: ActorId,\n    pub supply: HashMap<TokenId, u128>,\n}\n\nstatic mut CONTRACT: Option<SimpleMTK> = None;\n\n#[no_mangle]\nextern "C" fn init() {\n    let config: InitMTK = msg::load().expect("Unable to decode InitConfig");\n    let mut multi_token = SimpleMTK::default();\n    multi_token.tokens.name = config.name;\n    multi_token.tokens.symbol = config.symbol;\n    multi_token.tokens.base_uri = config.base_uri;\n    multi_token.owner = msg::source();\n    unsafe { CONTRACT = Some(multi_token) };\n}\n\n#[no_mangle]\nextern "C" fn handle() {\n    let action: MTKAction = msg::load().expect("Could not load msg");\n    let multi_token = unsafe { CONTRACT.get_or_insert(SimpleMTK::default()) };\n    match action {\n        MTKAction::Mint {\n            amount,\n            token_metadata,\n        } => MTKCore::mint(multi_token, token_id, amount, token_metadata),\n        MTKAction::Burn { token_id, amount } => MTKCore::burn(multi_token, token_id, amount),\n        MTKAction::BalanceOf { account, id } => {\n            MTKCore::balance_of(multi_token, vec![account], vec![id])\n        }\n        MTKAction::BalanceOfBatch { accounts, ids } => {\n            MTKCore::balance_of(multi_token, accounts, ids)\n        }\n        MTKAction::MintBatch {\n            ids,\n            amounts,\n            tokens_metadata,\n        } => MTKCore::mint(multi_token, &msg::source(), ids, amounts, tokens_metadata),\n        MTKAction::TransferFrom {\n            from,\n            to,\n            id,\n            amount,\n        } => MTKCore::transfer_from(multi_token, &from, &to, vec![id], vec![amount]),\n        MTKAction::BatchTransferFrom {\n            from,\n            to,\n            ids,\n            amounts,\n        } => MTKCore::transfer_from(multi_token, &from, &to, ids, amounts),\n        MTKAction::BurnBatch { ids, amounts } => MTKCore::burn(multi_token, ids, amounts),\n        MTKAction::Approve { account } => MTKCore::approve(multi_token, &account),\n        MTKAction::RevokeApproval { account } => MTKCore::revoke_approval(multi_token, &account),\n    }\n}\n')),(0,a.kt)("h2",{id:"developing-your-multitoken-contract"},"Developing your multitoken contract"),(0,a.kt)("p",null,"Next, let's rewrite the implementation of mint and burn functions and also add a transform function. Our mint function will create token for the account that send Mint message and require the metadata as an input argument. As for the burn function - is will be the same as a default one, but we override it, since we want to take care of the supply when we actually burn the token from the contract. Newly introduces transform function is used for converting FT to NFTs. Provided FT's are burnt from a user's account and multiple NFTs can be minted (but not more than the amount of burnt tokens)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"\n/// Element of transform function.\n#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct BurnToNFT {\n    /// To which account mint NFTs.\n    pub account: ActorId,\n    /// NFTs' IDs.\n    pub nfts_ids: Vec<TokenId>,\n    /// NFTs' metadata.\n    pub nfts_metadata: Vec<Option<TokenMetadata>>,\n}\n\npub enum MTKAction {\n    /// Mints a token.\n    ///\n    /// # Requirements:\n    /// * if minting an NFT `amount` MUST equal to 1.\n    /// * a sender MUST be an owner or an approved account.\n    ///\n    /// On success returns `MTKEvent::Transfer`.\n    Mint {\n        /// Token amount.\n        amount: u128,\n        /// Token metadata, applicable if minting an NFT.\n        token_metadata: Option<TokenMetadata>,\n    },\n\n    /// Burns a token.\n    ///\n    /// # Requirements:\n    /// * a sender MUST have sufficient amount of token to burn.\n    /// * a sender MUST be the owner.\n    ///\n    /// On success returns `MTKEvent::Transfer`.\n    Burn {\n        /// Token ID.\n        id: TokenId,\n        /// Amount of token to be burnt.\n        amount: u128,\n    },\n    /// Transforms user's tokens to multiple NFTs.\n    ///\n    /// # Requirements:\n    /// * a sender MUST have sufficient amount of tokens to burn,\n    /// * a sender MUST be the owner.\n    ///\n    /// On success returns `MTKEvent::Transfer`.\n    Transform {\n        /// Token's ID to burn.\n        id: TokenId,\n        /// Amount of burnt token.\n        amount: u128,\n        /// NFT minting data.\n        nfts: Vec<BurnToNFT>,\n    },\n}\n")),(0,a.kt)("p",null,"The TokenMetadata is also defined in the Gear MTK library:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, Default, Encode, Decode, Clone, TypeInfo)]\npub struct TokenMetadata {\n    // ex. "CryptoKitty #100"\n    pub name: String,\n    // free-form description\n    pub description: String,\n    // URL to associated media, preferably to decentralized, content-addressed storage\n    pub media: String,\n    // URL to an off-chain JSON file with more info.\n    pub reference: String,\n}\n')),(0,a.kt)("p",null,"Define a trait for our new function that will extend the default MTKCore trait:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait SimpleMTKCore: MTKCore {\n    fn mint(&mut self, amount: u128, token_metadata: Option<TokenMetadata>);\n\n    fn burn(&mut self, id: TokenId, amount: u128);\n\n    fn transform(&mut self, id: TokenId, amount: u128, nfts: Vec<BurnToNFT>);\n}\n")),(0,a.kt)("p",null,"and write the implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'impl SimpleMTKCore for SimpleMTK {\n    /// Mints a token.\n    ///\n    /// Arguments:\n    /// * `account`: Which account to mint tokens to. Default - `msg::source()`,\n    /// * `amount`: Token amount. In case of NFT - 1.\n    /// * `token_metadata`: Token metadata, only applicable when minting an NFT. Otherwise - `None`.\n    fn mint(&mut self, account: ActorId, amount: u128, token_metadata: Option<TokenMetadata>) {\n        MTKCore::mint(\n            self,\n            &account,\n            vec![(self.token_id)],\n            vec![amount],\n            vec![token_metadata],\n        );\n        self.supply.insert(self.token_id, amount);\n        self.token_id = self.token_id.saturating_add(1);\n    }\n\n    /// Burns a token.\n    ///\n    /// Requirements:\n    /// * sender MUST have sufficient amount of token.\n    ///\n    /// Arguments:\n    /// * `id`: Token ID.\n    /// * `amount`: Token\'s amount to be burnt.\n    fn burn(&mut self, id: TokenId, amount: u128) {\n        MTKCore::burn(self, vec![id], vec![amount]);\n        let sup = self.supply(id);\n        let mut _balance = self\n            .supply\n            .insert(self.token_id, sup.saturating_sub(amount));\n    }\n\n    /// Transforms FT tokens to multiple NFTs.\n    ///\n    /// Requirements:\n    /// * a sender MUST have sufficient amount of tokens to burn,\n    /// * a sender MUST be the owner.\n    ///\n    /// Arguments:\n    /// * `id`: Token ID.\n    /// * `amount`: Token\'s amount to be burnt.\n    /// * `accounts`: To which accounts to mint NFT.\n    /// * `nft_ids`: NFTs\' IDs to be minted.\n    /// * `nfts_metadata`: NFT\'s metadata.\n    fn transform(&mut self, id: TokenId, amount: u128, nfts: Vec<BurnToNFT>) {\n        // pre-checks\n        let mut nft_count = 0;\n        for info in &nfts {\n            nft_count += info.nfts_ids.len();\n        }\n        if amount as usize != nft_count {\n            panic!("MTK: amount of burnt tokens MUST be equal to the amount of nfts.");\n        }\n\n        // burn FT (not to produce another message - just simply use burn_impl)\n        self.assert_can_burn(&msg::source(), &id, amount);\n        self.burn_impl(&id, amount);\n\n        let sup = self.supply(id);\n        let mut _balance = self\n            .supply\n            .insert(self.token_id, sup.saturating_sub(amount));\n        let mut ids = vec![];\n\n        for burn_info in nfts {\n            if burn_info.account.is_zero() {\n                panic!("MTK: Mint to zero address");\n            }\n            if burn_info.nfts_ids.len() != burn_info.nfts_metadata.len() {\n                panic!("MTK: ids and amounts length mismatch");\n            }\n            burn_info\n                .nfts_metadata\n                .into_iter()\n                .enumerate()\n                .for_each(|(i, meta)| {\n                    self.mint_impl(&burn_info.account, &burn_info.nfts_ids[i], NFT_COUNT, meta)\n                });\n            for id in burn_info.nfts_ids {\n                ids.push(id);\n            }\n        }\n\n        msg::reply(\n            MTKEvent::Transfer {\n                operator: msg::source(),\n                from: ActorId::zero(),\n                to: ActorId::zero(),\n                ids: ids.to_vec(),\n                amounts: vec![NFT_COUNT; amount as usize],\n            },\n            0,\n        )\n        .expect("Error during a reply with MTKEvent::Transfer");\n    }\n}\n')),(0,a.kt)("p",null,"Accordingly, it is necessary to make changes to the handle function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    // code before remains the same...\n    MTKAction::Mint {\n        amount,\n        token_metadata,\n    } => SimpleMTKCore::mint(multi_token, amount, token_metadata),\n    MTKAction::Burn { id, amount } => SimpleMTKCore::burn(multi_token, id, amount),\n    MyMTKAction::Transform { id, amount, nfts } => {\n        SimpleMTKCore::transform(multi_token, id, amount, nfts)\n    }\n    // code after remains the same...\n")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Gear provides a reusable library with core functionality for the gMT protocol. By using object composition, that library can be utilized within a custom gMT/MTK contract implementation in order to minimize duplication of community available code."),(0,a.kt)("p",null,"A source code of the base lib providing multitoken functionality provided by Gear is available on GithHub: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/gear-lib/tree/master/lib/src/fungible_token"},(0,a.kt)("inlineCode",{parentName:"a"},"gear-lib/src/multitoken")),"."),(0,a.kt)("p",null,"A source code of the contract example provided by Gear is available on GitHub: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/multitoken/tree/master/src"},(0,a.kt)("inlineCode",{parentName:"a"},"multitoken/src")),"."),(0,a.kt)("p",null,"See also an example of the smart contract testing implementation based on gtest: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/multitoken/tree/master/tests"},(0,a.kt)("inlineCode",{parentName:"a"},"multitoken/tests")),"."),(0,a.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to this article: ",(0,a.kt)("a",{parentName:"p",href:"/docs/developing-contracts/testing"},"Program Testing"),"."))}m.isMDXComponent=!0}}]);