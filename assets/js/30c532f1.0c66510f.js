"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6940],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,m=u["".concat(i,".").concat(g)]||u[g]||c[g]||s;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},384:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:2},l="Gear Library",o={unversionedId:"developing-contracts/gstd",id:"developing-contracts/gstd",title:"Gear Library",description:"The Gear Protocol\u2019s library gstd provides all the necessary and sufficient functions and methods for developing smart-contracts.",source:"@site/docs/developing-contracts/gstd.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/gstd",permalink:"/docs/developing-contracts/gstd",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/gstd.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Executable Functions",permalink:"/docs/developing-contracts/executable-functions"},next:{title:"Mailbox",permalink:"/docs/developing-contracts/mailbox"}},i={},p=[{value:"Importing familiar types via prelude",id:"importing-familiar-types-via-prelude",level:2},{value:"Message handling",id:"message-handling",level:2},{value:"Execution info",id:"execution-info",level:2},{value:"Logging inside the contracts",id:"logging-inside-the-contracts",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gear-library"},"Gear Library"),(0,r.kt)("p",null,"The Gear Protocol\u2019s library ",(0,r.kt)("inlineCode",{parentName:"p"},"gstd")," provides all the necessary and sufficient functions and methods for developing smart-contracts."),(0,r.kt)("h2",{id:"importing-familiar-types-via-prelude"},"Importing familiar types via prelude"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"gstd")," default prelude lists things that Rust automatically imports into every program. It re-imports default ",(0,r.kt)("inlineCode",{parentName:"p"},"std")," modules and traits. ",(0,r.kt)("inlineCode",{parentName:"p"},"std")," can be safely replaced with ",(0,r.kt)("inlineCode",{parentName:"p"},"gstd")," in the Gear programs on Rust."),(0,r.kt)("p",null,"See more details ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gear.rs/gstd/prelude/index.html"},"here"),"."),(0,r.kt)("h2",{id:"message-handling"},"Message handling"),(0,r.kt)("p",null,"The Gear Protocol allows users and programs to interact with other users and programs via messages. Messages can contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"payload")," that will be able to be processed during message execution. Interaction with messages is possible thanks to the module ",(0,r.kt)("inlineCode",{parentName:"p"},"msg"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use gstd::msg;\n")),(0,r.kt)("p",null,"Message processing is possible only inside the defined functions ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"handle()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hadle_reply()"),". They also define the context for processing such messages."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get a payload of the message currently being processed and decode it:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\nuse gstd::{msg, prelude::*};\n\n#[no_mangle]\nextern "C" fn handle() {\n    let payload_string: String = msg::load().expect("Unable to decode `String`");\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reply to the message with payload:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\nuse gstd::msg;\n\n#[no_mangle]\nextern "C" fn handle() {\n    msg::reply("PONG", 0).expect("Unable to reply");\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Send message to user:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\nuse gstd::{msg, prelude::*};\n\n#[no_mangle]\nextern "C" fn handle() {\n    // ...\n    let id = msg::source();\n    let message_string = "Hello there".to_string();\n    msg::send(id, message_string, 0).expect("Unable to send message");\n}\n')),(0,r.kt)("p",null,"You can see more cases of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"msg")," module in our ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gear.rs/gstd/msg/index.html"},"documentation"),"."),(0,r.kt)("h2",{id:"execution-info"},"Execution info"),(0,r.kt)("p",null,"A program can get some useful information about the current execution context by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"exec")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use gstd::exec;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Send a reply after the block timestamp reaches the indicated date:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\nuse gstd::{exec, msg};\n\n#[no_mangle]\nextern "C" fn handle() {\n    // Timestamp is in milliseconds since the Unix epoch\n    if exec::block_timestamp() >= 1672531200000 {\n        msg::reply(b"Current block has been generated after January 01, 2023", 0)\n            .expect("Unable to reply");\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get self value balance of a program:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\nuse gstd::exec;\n\n#[no_mangle]\nextern "C" fn handle() {\n    // Get self value balance in program\n    let my_balance = exec::value_available();\n}\n')),(0,r.kt)("p",null,"You can read more about program syscalls ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gear.rs/gstd/exec/index.html"},"here"),"."),(0,r.kt)("h2",{id:"logging-inside-the-contracts"},"Logging inside the contracts"),(0,r.kt)("p",null,"Macro ",(0,r.kt)("inlineCode",{parentName:"p"},"gstd::debug")," provides an ability to debug contract during program execution:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\nuse gstd::{debug, msg, prelude::*};\n\n#[no_mangle]\nextern "C" fn handle() {\n    let payload_string: String = msg::load().expect("Unable to decode `String`");\n    debug!("{:?} received message: ", payload_string);\n}\n')))}c.isMDXComponent=!0}}]);