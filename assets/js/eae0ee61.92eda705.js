"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6658],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(a),f=r,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||i;return a?n.createElement(m,o(o({ref:t},s),{},{components:a})):n.createElement(m,o({ref:t},s))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:r,o[1]=d;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5804:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_label:"Metadata",sidebar_position:5},o="Matadata",d={unversionedId:"developing-contracts/metadata",id:"developing-contracts/metadata",title:"Matadata",description:"Metadata is a kind of interface map that helps to transform a set of bytes into an understandable structure and indicates the function this structure is intended for. Metadata determines how all incoming and outgoing data will be encoded/decoded.",source:"@site/docs/developing-contracts/metadata.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/metadata",permalink:"/docs/developing-contracts/metadata",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/metadata.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Metadata",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"State Functions",permalink:"/docs/developing-contracts/state"},next:{title:"Data Encoding/Decoding",permalink:"/docs/developing-contracts/codec"}},l={},c=[{value:"Genarate metadata",id:"genarate-metadata",level:2},{value:"Verify metadata",id:"verify-metadata",level:2}],s={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"matadata"},"Matadata"),(0,r.kt)("p",null,"Metadata is a kind of interface map that helps to transform a set of bytes into an understandable structure and indicates the function this structure is intended for. Metadata determines how all incoming and outgoing data will be encoded/decoded."),(0,r.kt)("p",null,"Metadata allows dApp\u2019s parts - the smart-contract and the client side (JavaScript), to understand each other and exchange data."),(0,r.kt)("p",null,"To describe metadata interface use ",(0,r.kt)("inlineCode",{parentName:"p"},"gmeta")," crate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use gmeta::{InOut, Metadata};\n\npub struct ProgramMetadata;\n\n// Be sure to describe all the types.\n// But if any of the endpoints is missing in your program, you can use ();\n// as indicated in the case of `type Signal`.\n\nimpl Metadata for ProgramMetadata {\n    type Init = InOut<MessageInitIn, MessageInitOut>;\n    type Handle = InOut<MessageIn, MessageOut>;\n    type Others = InOut<MessageAsyncIn, Option<u8>>;\n    type Reply = InOut<String, Vec<u16>>;\n    type Signal = ();\n    type State = Vec<Wallet>;\n}\n")),(0,r.kt)("p",null,"As we can see, metadata enables you to determine the expected data at the input/output for the contract at each endpoint. Where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Init")," - describes incoming/outgoing types for ",(0,r.kt)("inlineCode",{parentName:"li"},"init()")," function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Handle")," - describes incoming/outgoing types for ",(0,r.kt)("inlineCode",{parentName:"li"},"handle()")," function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Others")," - describes incoming/outgoing types for ",(0,r.kt)("inlineCode",{parentName:"li"},"main()")," function in case of asyncronius interaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Reply")," - describes incoming/outgoing types of message performed using the ",(0,r.kt)("inlineCode",{parentName:"li"},"handle_reply")," function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Signal")," - describes only the outgoing type from the program while processing the system signal."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"State")," - describes the types for the queried State")),(0,r.kt)("h2",{id:"genarate-metadata"},"Genarate metadata"),(0,r.kt)("p",null,"To generate metadata, the following ",(0,r.kt)("inlineCode",{parentName:"p"},"build.rs")," file in the root of your project folder is required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// build.rs\n// Where ProgramMetadata is your metadata structure\n\nuse meta_io::ProgramMetadata;\n\nfn main() {\n    gear_wasm_builder::build_with_metadata::<ProgramMetadata>();\n}\n")),(0,r.kt)("p",null,"As a result of the smart-contract compilation, a ",(0,r.kt)("inlineCode",{parentName:"p"},"meta.txt")," file will be generated. This metadata file can be used in the UI applications that will interact with this smart-contract. The file\u2019s content looks like a hex string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"01000000000103000000010500000001090000000102000000010d000000010f0000000111000000000112000000a9094c00083064656d6f5f6d6574615f696f344d657373616765496e6974496e0000080118616d6f756e74040108753800012063757272656e6379080118537472696e6700000400000503000800000502000c083064656d6f5f6d6574615f696f384d657373616765496e69744f7574000008013465786368616e67655f72617465100138526573756c743c75382c2075383e00010c73756d04010875380000100418526573756c740804540104044501040108084f6b040004000000000c457272040004000001000014083064656d6f5f6d6574615f696f244d657373616765496e000004010869641801084964000018083064656d6f5f6d6574615f696f084964000008011c646563696d616c1c010c75363400010c68657820011c5665633c75383e00001c000005060020000002040024083064656d6f5f6d6574615f696f284d6573736167654f7574000004010c7265732801384f7074696f6e3c57616c6c65743e00002804184f7074696f6e040454012c0108104e6f6e6500000010536f6d6504002c00000100002c083064656d6f5f6d6574615f696f1857616c6c6574000008010869641801084964000118706572736f6e300118506572736f6e000030083064656d6f5f6d6574615f696f18506572736f6e000008011c7375726e616d65080118537472696e670001106e616d65080118537472696e6700003400000238003800000504003c083064656d6f5f6d6574615f696f384d6573736167654173796e63496e0000040114656d707479400108282900004000000400004404184f7074696f6e04045401040108104e6f6e6500000010536f6d650400040000010000480000022c00\n")),(0,r.kt)("h2",{id:"verify-metadata"},"Verify metadata"),(0,r.kt)("p",null,"To make it possible to verify metadata for a program, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"metahash()")," function. It allows verifying metadata on-chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\n// It returns the Hash of metadata.\n// .metahash is generating automatically while you are using build.rs\nextern "C" fn metahash() {\n    let metahash: [u8; 32] = include!("../.metahash");\n    msg::reply(metahash, 0).expect("Failed to share metahash");\n}\n')))}p.isMDXComponent=!0}}]);