"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6280],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"PING-PONG",sidebar_position:2},i="PING-PONG",l={unversionedId:"examples/ping",id:"examples/ping",title:"PING-PONG",description:"Gear is very easy to write code for!",source:"@site/docs/examples/ping.md",sourceDirName:"examples",slug:"/examples/ping",permalink:"/docs/examples/ping",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/ping.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"PING-PONG",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/docs/examples/prerequisites"},next:{title:"gFT (ERC-20)",permalink:"/docs/examples/gft-20"}},s={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ping-pong"},"PING-PONG"),(0,r.kt)("p",null,"Gear is very easy to write code for!"),(0,r.kt)("p",null,"Let's look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/app/"},"minimal program"),". It contains the following files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 io /\n\u2502   \u251c\u2500\u2500 src /\n\u2502   \u2502   \u2514\u2500\u2500 lib.rs\n\u2502   \u2514\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 contract.rs\n\u2502   \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 state/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 lib.rs\n\u2502   \u2502   \u2514\u2500\u2500 state.rs\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 build.rs\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 gclient_test.rs\n\u2502   \u2514\u2500\u2500 test.rs\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 meta.txt\n\u2514\u2500\u2500 build.rs\n")),(0,r.kt)("p",null,"The code of the program is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contract.rs")," file. The program replies with ",(0,r.kt)("inlineCode",{parentName:"p"},"Pong")," string if the sender sent ",(0,r.kt)("inlineCode",{parentName:"p"},"Ping")," message to it. It also saves how many times a user sent a ping message to the program.",(0,r.kt)("br",{parentName:"p"}),"\n","So, the program contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"state definition:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"static mut STATE: Option<HashMap<ActorId, u128>> = None;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"init")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"handle")," entrypoints:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nextern "C" fn init() {\n    unsafe { STATE = Some(HashMap::new()) }\n}\n\n#[no_mangle]\nextern "C" fn handle() {\n    process_handle()\n        .expect("Failed to load, decode, encode, or reply with `PingPong` from `handle()`")\n}\n\nfn process_handle() -> Result<(), ContractError> {\n    let payload = msg::load()?;\n\n    if let PingPong::Ping = payload {\n        let pingers = static_mut_state();\n\n        pingers\n            .entry(msg::source())\n            .and_modify(|ping_count| *ping_count = ping_count.saturating_add(1))\n            .or_insert(1);\n\n        reply(PingPong::Pong)?;\n    }\n\n    Ok(())\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," function that allows to read the program state:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nextern "C" fn state() {\n    reply(common_state()).expect(\n        "Failed to encode or reply with `<ContractMetadata as Metadata>::State` from `state()`",\n    );\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metahash()")," function that returns the metadata hash:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nextern "C" fn metahash() {\n    reply(include!("../.metahash"))\n        .expect("Failed to encode or reply with `[u8; 32]` from `metahash()`");\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"lib.rs")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory contains the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#![no_std]\n\n#[cfg(not(feature = "binary-vendor"))]\nmod contract;\n\n#[cfg(feature = "binary-vendor")]\ninclude!(concat!(env!("OUT_DIR"), "/wasm_binary.rs"));\n')),(0,r.kt)("p",null,"The enabled ",(0,r.kt)("inlineCode",{parentName:"p"},"binary-vendor")," feature will include the generated WASM binary as 3 constants: WASM_BINARY, WASM_BINARY_OPT and WASM_BINARY_META in the root crate. These constants can be used in tests with ",(0,r.kt)("inlineCode",{parentName:"p"},"gclient")," instead of paths to wasm files in the target directory. You may not use that approach and simply write the contract code in the ",(0,r.kt)("inlineCode",{parentName:"p"},"lib.rs")," file."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"io")," crate defines the contract metadata, namely, the state of the program and what messages the program receives and sends."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Encode, Decode, TypeInfo, Hash, PartialEq, PartialOrd, Eq, Ord, Clone, Copy, Debug)]\npub enum PingPong {\n    Ping,\n    Pong,\n}\n\npub struct ContractMetadata;\n\nimpl Metadata for ContractMetadata {\n    type Init = ();\n    type Handle = InOut<PingPong, PingPong>;\n    type Others = ();\n    type Reply = ();\n    type Signal = ();\n    type State = State;\n}\n\n#[derive(Encode, Decode, TypeInfo, Hash, PartialEq, PartialOrd, Eq, Ord, Clone, Debug, Default)]\npub struct State(pub Vec<(ActorId, u128)>);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ContractMetadata")," struct is used in ",(0,r.kt)("inlineCode",{parentName:"p"},"build.rs")," in order to generate ",(0,r.kt)("inlineCode",{parentName:"p"},"meta.txt")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use app_io::ContractMetadata;\n\nfn main() {\n    gear_wasm_builder::build_with_metadata::<ContractMetadata>();\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," is the independent crate for reading the program state. It depends on the ",(0,r.kt)("inlineCode",{parentName:"p"},"app-io")," crate where the type of the contract state is defined:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use app_io::*;\nuse gmeta::{metawasm, Metadata};\nuse gstd::{prelude::*, ActorId};\n\n#[metawasm]\npub trait Metawasm {\n    type State = <ContractMetadata as Metadata>::State;\n\n    fn pingers(state: Self::State) -> Vec<ActorId> {\n        state.pingers()\n    }\n\n    fn ping_count(actor: ActorId, state: Self::State) -> u128 {\n        state.ping_count(actor)\n    }\n}\n")),(0,r.kt)("p",null,"In the tests directory you can see an example of testing the  program using ",(0,r.kt)("inlineCode",{parentName:"p"},"gclient")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"gtest"),". For more details about testing smart contracts written on Gear, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/developing-contracts/testing"},"Program Testing")," article."))}d.isMDXComponent=!0}}]);